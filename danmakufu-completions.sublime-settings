{
	"scope": "source.danmakufu",

	"dict":
	[

		// Math functions

		{ "sig": "Math::min(a, b)\treal", "doc": "Parameters:\n\t1) value 1\n\t2) value 2\nReturns the minimum of the two values." },
		{ "sig": "Math::max(a, b)\treal", "doc": "Parameters:\n\t1) value 1\n\t2) value 2\nReturns the maximum of the two values." },
		{ "sig": "Math::log(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the natural log (base e) of the value" },
		{ "sig": "Math::log10(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the common log (base 10) of the value" },
		{ "sig": "Math::cos(angle)\treal", "doc": "Parameters:\n\t1) value\nReturns the cosine of the angle. Cosine is a value between -1 and 1 that corresponds to the x-value in a coordinate plane." },
		{ "sig": "Math::sin(angle)\treal", "doc": "Parameters:\n\t1) value\nReturns the sine of the angle. Sine is a value between -1 and 1 that corresponds to the y-value in a coordinate plane." },
		{ "sig": "Math::tan(angle)\treal", "doc": "Parameters:\n\t1) value\nReturns the tangent of the angle. Tangent is the slope of the line created by the angle (x/y)." },
		{ "sig": "Math::acos(x)\treal", "doc": "Parameters:\n\t1) value\nReturns the arccosine of the angle. acos(cos(x)) = x, if x is between 0 and 180." },
		{ "sig": "Math::asin(y)\treal", "doc": "Parameters:\n\t1) value\nReturns the arcsine of the value. asin(sin(x)) = x, if x is between -90 and 90." },
		{ "sig": "Math::atan(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the arctangent of the value. atan(tan(x)) = x, if x is between -90 and 90." },
		{ "sig": "Math::atan2(y, x)\treal", "doc": "Parameters:\n\t1) y value\n\t2) x value\nReturns the arctangent of y/x, which is the angle from (0, 0) to (x, y). The angle will be in the range -180 < a <= 180, where a is the returned value.\nUseful for getting the angle from one point to another point. For example, the angle from the boss to the player is atan2(player y - boss y, player x - boss x)." },
		{ "sig": "Math::rand(min, max)\treal", "doc": "Parameters:\n\t1) min value\n\t2) max value\nReturns a random value between the two values.\nNote that the random value is not an integer; if you need one, use either round(), ceil(), or floor() on the returned value." },
		{ "sig": "Math::round(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the value as an integer. Values of 0.5 or greater are rounded up; otherwise they are rounded down." },
		{ "sig": "Math::truncate(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the value with no decimal places. For instance, 1.123 becomes 1." },
		{ "sig": "Math::trunc(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the value with no decimal places. For instance, 1.123 becomes 1." },
		{ "sig": "Math::ceil(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the value rounded up to the next integer." },
		{ "sig": "Math::floor(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the value rounded down to the next integer." },
		{ "sig": "Math::absolute(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the value as an absolute number (if it is negative, it will be changed to a positive)." },
		{ "sig": "Math::modc(a, mod)\treal", "doc": "Parameters:\n\t1) value\n\t2) value to mod by\nReturns a modulus of the first value.\nModulus provides the remainder of the division (7 modulo 5 would be 2)." },

		// String functions

		{ "sig": "String::InstallFont(path)\tbool", "doc": "Parameters:\n\t1) path to font\nLoads the given font, which can be used with ObjText_SetFontType, allowing for usage of fonts that are not standard to Windows.[r]Returns true if successful." },
		{ "sig": "String::ToString(a)\tchar", "doc": "Parameters:\n\t1) value\nReturns the value as a string, able to be used by text functions." },
		{ "sig": "String::IntToString(num)\tchar", "doc": "Parameters:\n\t1) value\nReturns the value as a string. Omits any decimal places." },
		{ "sig": "String::itoa(num)\tchar", "doc": "Parameters:\n\t1) value\nConverts an integer value to an array form, but leaves out decimal places." },
		{ "sig": "String::rtoa(num)\tchar", "doc": "Parameters:\n\t1) value\nConverts any real number to an array format." },
		{ "sig": "String::rtos(format, num)\tchar", "doc": "Parameters:\n\t1) format\n\t2) value\nReturns the value as a string, with some filtering options.\nThe format is presented as a string that determines how many digits will be shown; it can contain any combination of the following three characters: 0, ., #.\n0 is a slot for a digit. . represents the decimal place in the string. # creates a space in the string." },
		{ "sig": "String::vtos(format, num)\tchar", "doc": "Parameters:\n\t1) format\n\t2) value" },
		{ "sig": "String::atoi(str)\treal", "doc": "Parameters:\n\t1) value\nTakes the contents of an array and converts it into an integer." },
		{ "sig": "String::ator(str)\treal", "doc": "Parameters:\n\t1) value\nTakes the contents of an array and converts it into a real number." },
		{ "sig": "String::TrimString(str)\tchar", "doc": "Parameters:\n\t1) String\nReturns the string with spaces removed from the beginning and ending of the text." },
		{ "sig": "String::SplitString(str, delimiter)\tchar[]", "doc": "Parameters:\n\t1) Original String\n\t2) delimiter\nReturns an array containing the split strings." },

		// Path functions

		{ "sig": "Path::GetFileDirectory(path)\tchar", "doc": "" },
		{ "sig": "Path::GetDirectoryList(path)\tstring[]", "doc": "" },
		{ "sig": "Path::GetModuleDirectory()\tchar", "doc": "" },
		{ "sig": "Path::GetMainStgScriptPath()\tchar", "doc": "" },
		{ "sig": "Path::GetMainPackageScriptPath()\tchar", "doc": "" },
		{ "sig": "Path::GetMainStgScriptDirectory()\tchar", "doc": "" },
		{ "sig": "Path::GetCurrentScriptDirectory()\tchar", "doc": "" },
		{ "sig": "Path::GetScriptPathList(folder, type)\tstring[]", "doc": "" },

		// Time functions

		{ "sig": "Time::GetCurrentDateTimeS()\tchar", "doc": "Returns a string containing the current date and time.\nFor example, if the current date is 2012/09/16 12:34:56, then 20120916123456 will be returned." },
		{ "sig": "Time::GetStageTime()\treal", "doc": "Returns a number with the amount of time that has been elapsed since the start of the main script.\nThe value is in milliseconds." },
		{ "sig": "Time::GetPackageTime()\treal", "doc": "Returns a number with the amount of time that has been elapsed since the start of the package script.\nThe value is in milliseconds." },
		{ "sig": "Time::GetCurrentFps()\treal", "doc": "Returns the current FPS." },
		{ "sig": "Time::GetReplayFps()\treal", "doc": "Returns the FPS of the replay at the current time.\nNote that this value refreshes as a much slower rate than GetCurrentFps." },

		// Debug functions

		{ "sig": "Debug::WriteLog(string)\tvoid", "doc": "Parameters:\n\t1) String\nOutputs the given string to log." },
		{ "sig": "Debug::RaiseError(string)\tvoid", "doc": "Parameters:\n\t1) String\nCreates an error box with the specified string.\nExecution of the script is stopped, closing the script." },

		// Common Data functions
		{ "sig": "CommonData::SetCommonData(key, value)\tvoid", "doc": "" },
		{ "sig": "CommonData::GetCommonData(key, default)\tfree", "doc": "" },
		{ "sig": "CommonData::ClearCommonData()\tvoid", "doc": "" },
		{ "sig": "CommonData::DeleteCommonData(key)\tvoid", "doc": "" },
		{ "sig": "CommonData::SetAreaCommonData(area, key, value)\tvoid", "doc": "" },
		{ "sig": "CommonData::GetAreaCommonData(area, key, default)\tfree", "doc": "" },
		{ "sig": "CommonData::ClearAreaCommonData(area)\tvoid", "doc": "" },
		{ "sig": "CommonData::DeleteAreaCommonData(area, key)\tvoid", "doc": "" },
		{ "sig": "CommonData::CreateCommonDataArea(area)\tvoid", "doc": "" },
		{ "sig": "CommonData::IsCommonDataAreaExists(area)\tbool", "doc": "" },
		{ "sig": "CommonData::CopyCommonDataArea(area1, area2)\tvoid", "doc": "" },
		{ "sig": "CommonData::GetCommonDataAreaKeyList()\tchar[]", "doc": "" },
		{ "sig": "CommonData::GetCommonDataValueKeyList(area)\tchar[]", "doc": "" },
		{ "sig": "CommonData::SaveCommonDataAreaA1(area)\tbool", "doc": "" },
		{ "sig": "CommonData::LoadCommonDataAreaA1(area)\tbool", "doc": "" },
		{ "sig": "CommonData::SaveCommonDataAreaA2(area, path)\tbool", "doc": "" },
		{ "sig": "CommonData::LoadCommonDataAreaA2(area, path)\tbool", "doc": "" },
		{ "sig": "CommonData::SaveCommonDataAreaToReplayFile(area)\tbool", "doc": "" },
		{ "sig": "CommonData::LoadCommonDataAreaFromReplayFile(area)\tbool", "doc": "" },

		// Audio functions

		{ "sig": "Audio::LoadSound(path)\tvoid", "doc": "Parameters:\n\t1) path\nLoads specified sound file." },
		{ "sig": "Audio::RemoveSound(path)\tvoid", "doc": "Parameters:\n\t1) path\nRemoves specified sound file." },
		{ "sig": "Audio::PlayBGM(path, loop_start, loop_end)\tvoid", "doc": "Parameters:\n\t1) path\n\t2) loop start second (real)\n\t3) loop end second (real)\nPlays the specified sound file as a looping BGM.\nYou can be more precise by using decimals (for instance, if you want to loop from 2.5 seconds on, you can type 2.5)." },
		{ "sig": "Audio::PlaySE(path)\tvoid", "doc": "Parameters:\n\t1) path\nPlays specified sound file as a sound effect." },
		{ "sig": "Audio::StopSound(path)\tvoid", "doc": "Parameters:\n\t1) path\nStops specified sound file." },

		//Input functions

		{ "sig": "Input::GetVirtualKeyState(key)\tconstant", "doc": "" },
		{ "sig": "Input::SetVirtualKeyState(key, state)\tvoid", "doc": "" },
		{ "sig": "Input::AddVirtualKey(v_key, key, pad_key)\tvoid", "doc": "" },
		{ "sig": "Input::AddReplayTargetVirtualKey(key)\tvoid", "doc": "" },
		{ "sig": "Input::GetKeyState(key)\tconstant", "doc": "" },
		{ "sig": "Input::GetMouseState(button)\tconstant", "doc": "" },
		{ "sig": "Input::GetMouseX()\treal", "doc": "" },
		{ "sig": "Input::GetMouseY()\treal", "doc": "" },
		{ "sig": "Input::GetMouseMoveZ()\treal", "doc": "" },
		{ "sig": "Input::SetSkipModeKey(key)\tvoid", "doc": "" },

		//Render functions

		{ "sig": "Render::LoadTexture(path)\tvoid", "doc": "" },
		{ "sig": "Render::LoadTextureInLoadThread(path)\tvoid", "doc": "" },
		{ "sig": "Render::RemoveTexture(path)\tvoid", "doc": "" },
		{ "sig": "Render::GetTextureWidth(path)\treal", "doc": "" },
		{ "sig": "Render::GetTextureHeight(path)\treal", "doc": "" },
		{ "sig": "Render::SetFogEnable(bool)\tvoid", "doc": "" },
		{ "sig": "Render::SetFogParam(start, end, r, g, b)\tvoid", "doc": "" },
		{ "sig": "Render::ClearInvalidRenderPriority()\tvoid", "doc": "" },
		{ "sig": "Render::SetInvalidRenderPriorityA1(start, end)\tvoid", "doc": "" },
		{ "sig": "Render::GetReservedRenderTargetName(index)\tvoid", "doc": "" },
		{ "sig": "Render::CreateRenderTarget(target)\tbool", "doc": "" },
		{ "sig": "Render::RenderToTextureA1(target, start, end, clear)\tvoid", "doc": "" },
		{ "sig": "Render::RenderToTextureB1(target, obj, clear)\tvoid", "doc": "" },
		{ "sig": "Render::SaveRenderedTextureA1(target, file)\tvoid", "doc": "" },
		{ "sig": "Render::SaveRenderedTextureA2(target, file, l, t, r, b)\tvoid", "doc": "" },
		{ "sig": "Render::SaveSnapShotA1(file)\tvoid", "doc": "" },
		{ "sig": "Render::SaveSnapShotA2(file, l, t, r, b)\tvoid", "doc": "" },

		//3D Camera functions

		{ "sig": "3DCamera::SetCameraFocusX(x)\tvoid", "doc": "" },
		{ "sig": "3DCamera::SetCameraFocusY(y)\tvoid", "doc": "" },
		{ "sig": "3DCamera::SetCameraFocusZ(z)\tvoid", "doc": "" },
		{ "sig": "3DCamera::SetCameraFocusXYZ(x, y, z)\tvoid", "doc": "" },
		{ "sig": "3DCamera::SetCameraRadius(radius)\tvoid", "doc": "" },
		{ "sig": "3DCamera::SetCameraAzimuthAngle(angle)\tvoid", "doc": "" },
		{ "sig": "3DCamera::SetCameraElevationAngle(angle)\tvoid", "doc": "" },
		{ "sig": "3DCamera::SetCameraYaw(angle)\tvoid", "doc": "" },
		{ "sig": "3DCamera::SetCameraPitch(pitch)\tvoid", "doc": "" },
		{ "sig": "3DCamera::SetCameraRoll(roll)\tvoid", "doc": "" },
		{ "sig": "3DCamera::GetCameraX()\treal", "doc": "" },
		{ "sig": "3DCamera::GetCameraY()\treal", "doc": "" },
		{ "sig": "3DCamera::GetCameraZ()\treal", "doc": "" },
		{ "sig": "3DCamera::GetCameraFocusX()\treal", "doc": "" },
		{ "sig": "3DCamera::GetCameraFocusY()\treal", "doc": "" },
		{ "sig": "3DCamera::GetCameraFocusZ()\treal", "doc": "" },
		{ "sig": "3DCamera::GetCameraRadius()\treal", "doc": "" },
		{ "sig": "3DCamera::GetCameraAzimuthAngle(angle)\treal", "doc": "" },
		{ "sig": "3DCamera::GetCameraElevationAngle(angle)\treal", "doc": "" },
		{ "sig": "3DCamera::GetCameraYaw()\treal", "doc": "" },
		{ "sig": "3DCamera::GetCameraPitch(pitch)\treal", "doc": "" },
		{ "sig": "3DCamera::GetCameraRoll(roll)\treal", "doc": "" },
		{ "sig": "3DCamera::SetCameraPerspectiveClip(near_clip, far_clip)\tvoid", "doc": "" },

		// 2D Camera functions

		{ "sig": "2DCamera::Set2DCameraFocusX(x)\tvoid", "doc": "" },
		{ "sig": "2DCamera::Set2DCameraAngleZ(angle)\tvoid", "doc": "" },
		{ "sig": "2DCamera::Set2DCameraFocusY(y)\tvoid", "doc": "" },
		{ "sig": "2DCamera::Set2DCameraRatio(ratio)\tvoid", "doc": "" },
		{ "sig": "2DCamera::Set2DCameraRatioX(ratio)\tvoid", "doc": "" },
		{ "sig": "2DCamera::Set2DCameraRatioY(ratio)\tvoid", "doc": "" },
		{ "sig": "2DCamera::Reset2DCamera()\tvoid", "doc": "" },
		{ "sig": "2DCamera::Get2DCameraX()\treal", "doc": "" },
		{ "sig": "2DCamera::Get2DCameraY()\treal", "doc": "" },
		{ "sig": "2DCamera::Get2DCameraAngleZ()\treal", "doc": "" },
		{ "sig": "2DCamera::Get2DCameraRatio()\treal", "doc": "" },
		{ "sig": "2DCamera::Get2DCameraRatioX()\treal", "doc": "" },
		{ "sig": "2DCamera::Get2DCameraRatioY()\treal", "doc": "" },

		//Script functions

		{ "sig": "Script::LoadScript(path)\treal[]", "doc": "" },
		{ "sig": "Script::LoadScriptInThread(path)\treal[]", "doc": "" },
		{ "sig": "Script::StartScript(id)\tvoid", "doc": "" },
		{ "sig": "Script::CloseScript(id)\tvoid", "doc": "" },
		{ "sig": "Script::IsCloseScript(id)\tbool", "doc": "" },
		{ "sig": "Script::SetScriptArgument(id, index, value)\tvoid", "doc": "" },
		{ "sig": "Script::GetScriptArgument(index)\tfree", "doc": "" },
		{ "sig": "Script::GetScriptArgumentCount()\treal", "doc": "" },
		{ "sig": "Script::CloseStgScene()\tvoid", "doc": "" },
		{ "sig": "Script::GetOwnScriptID()\treal[]", "doc": "" },
		{ "sig": "Script::GetEventType()\tconstant", "doc": "" },
		{ "sig": "Script::GetEventArgument(index)\tdepend", "doc": "" },
		{ "sig": "Script::SetScriptResult(value)\tvoid", "doc": "" },
		{ "sig": "Script::GetScriptResult(id)\tfree", "doc": "" },
		{ "sig": "Script::SetAutoDeleteObject(delete)\tvoid", "doc": "" },
		{ "sig": "Script::NotifyEvent(id, event_type, value)\tvoid", "doc": "" },
		{ "sig": "Script::NotifyEventAll(event_type, value)\tvoid", "doc": "" },
		{ "sig": "Script::GetScriptInfoA1(path, info_type)\tdepend", "doc": "" },

		//System functions

		{ "sig": "System::SetStgFrame(l, t, r, b, min_layer, max_layer)\tvoid", "doc": "Parameters:\n\t1) rectangle left\n\t2) rectangle top\n\t3) rectangle right\n\t4) rectangle bottom\n\t5) minimum render priority\n\t6) maximum render priority\nSets the STG space frame. Default values are (32, 16, 416, 464, 20, 80)." },
		{ "sig": "System::GetScore()\treal", "doc": "Returns the current score." },
		{ "sig": "System::AddScore(value)\tvoid", "doc": "Parameters:\n\t1) value\nAdds the given value to the score." },
		{ "sig": "System::GetGraze()\treal", "doc": "Returns the current amount of graze." },
		{ "sig": "System::AddGraze(value)\tvoid", "doc": "Parameters:\n\t1) value\nAdds the given value to the graze count." },
		{ "sig": "System::GetPoint()\treal", "doc": "Returns the current amount of point items collected (default is the blue point item)." },
		{ "sig": "System::AddPoint(num_items)\tvoid", "doc": "Parameters:\n\t1) value\nAdds the given value to the point count." },
		{ "sig": "System::SetItemRenderPriorityI(layer)\tvoid", "doc": "Parameters:\n\t1) render priority (0-100)\nSets the render priority for items (default is 60)." },
		{ "sig": "System::SetShotRenderPriorityI(layer)\tvoid", "doc": "Parameters:\n\t1) render priority (0-100)\nSets the render priority for bullets (default is 50)." },
		{ "sig": "System::GetStgFrameRenderPriorityMinI()\treal", "doc": "Returns the lowest render priority for the STG frame (0-100) (default is 20)." },
		{ "sig": "System::GetStgFrameRenderPriorityMaxI()\treal", "doc": "Returns the highest render priority for the STG frame (0-100) (default is 80)." },
		{ "sig": "System::GetItemRenderPriorityI()\treal", "doc": "Returns the render priority for items (0-100) (default is 60)." },
		{ "sig": "System::GetShotRenderPriorityI()\treal", "doc": "Returns the render priority for shots (0-100) (default is 50)." },
		{ "sig": "System::GetPlayerRenderPriorityI()\treal", "doc": "Returns the render priority for the player (0-100) (default is 30)." },
		{ "sig": "System::GetCameraFocusPermitPriorityI()\treal", "doc": "Returns the highest render priority the 2D camera can affect (0-100) (default is 79)" },
		{ "sig": "System::GetStgFrameLeft()\treal", "doc": "Returns the leftmost value of the STG frame." },
		{ "sig": "System::GetStgFrameTop()\treal", "doc": "Returns the topmost value of the STG frame." },
		{ "sig": "System::GetStgFrameWidth()\treal", "doc": "Returns the width of the STG frame." },
		{ "sig": "System::GetStgFrameHeight()\treal", "doc": "Returns the height of the STG frame." },
		{ "sig": "System::GetScreenWidth()\treal", "doc": "Returns the width of Danmakufu's drawing space." },
		{ "sig": "System::GetScreenHeight()\treal", "doc": "Returns the Height of Danmakufu's drawing space." },
		{ "sig": "System::IsReplay()\tbool", "doc": "Returns true if a replay is playing, false otherwise." },
		{ "sig": "System::AddArchiveFile(path)\tbool", "doc": "Parameters:\n\t1) archive file path\nAdds the path to use when reading images or sounds from an archive file.\nReturns true if the archive was successfully read, false otherwise." },

		//Player functions

		{ "sig": "Player::GetPlayerObjectID()\tobj", "doc": "Gets player object ID." },
		{ "sig": "Player::GetPlayerScriptID()\treal", "doc": "Returns the player's script ID.\nThis function returns the same value as GetOwnScriptID when used inside the player script." },
		{ "sig": "Player::SetPlayerSpeed(normal_speed, focus_speed)\tvoid", "doc": "Parameters:\n\t1) normal speed (real)\n\t2) focus speed (real)\nSets the normal speed and focus speed of the player." },
		{ "sig": "Player::SetPlayerClip(l, t, r, b)\tvoid", "doc": "Parameters:\n\t1) left bound\n\t2) top bound\n\t3) right bound\n\t4) botton bound\nSets the area within which the player can move." },
		{ "sig": "Player::SetPlayerLife(value)\tvoid", "doc": "Parameters:\n\t1) value\nSets value as life points for the player (can be non integer)." },
		{ "sig": "Player::SetPlayerSpell(value)\tvoid", "doc": "Parameters:\n\t1) value\nSets the amount of bombs available for the player (can be non integer)." },
		{ "sig": "Player::SetPlayerPower(value)\tvoid", "doc": "Parameters:\n\t1) value\nSets the amount of power points (can be non integer)." },
		{ "sig": "Player::SetPlayerInvincibilityFrame(num_frames)\tvoid", "doc": "Parameters:\n\t1) number frames\nSets the amount of frames for player invincibility." },
		{ "sig": "Player::SetPlayerDownStateFrame(num_frames)\tvoid", "doc": "Parameters:\n\t1) number frames\nSets the amount of frames that will wait before respawning the player." },
		{ "sig": "Player::SetPlayerRebirthFrame(num_frames)\tvoid", "doc": "Parameters:\n\t1) number frames\nSets the amount of frames the player can counter bomb.\nDefault is 15." },
		{ "sig": "Player::SetPlayerRebirthLossFrame(lost_frames)\tvoid", "doc": "Parameters:\n\t1) number frames\nSets the amount of counter bomb frames the player loses per counter bomb.\nDefault value is 3." },
		{ "sig": "Player::SetPlayerAutoItemCollectLine(y)\tvoid", "doc": "Parameters:\n\t1) y coordinate\nSets the y-coordinate of the auto collect line.\nA negative value removes the line.\nDefault is no line." },
		{ "sig": "Player::SetForbidPlayerShot(forbid)\tvoid", "doc": "Parameters:\n\t1) boolean\nWhen set to true, the player cannot use normal shots." },
		{ "sig": "Player::SetForbidPlayerSpell(forbid)\tvoid", "doc": "Parameters:\n\t1) boolean\nWhen set to true, the player cannot use bombs." },
		{ "sig": "Player::GetPlayerX()\treal", "doc": "Gets the x-coordinate of the player." },
		{ "sig": "Player::GetPlayerY()\treal", "doc": "Gets the y-coordinate of the player." },
		{ "sig": "Player::GetPlayerState()\tconstant", "doc": "Gets the player state:\n\tSTATE_NORMAL: the player is alive.\n\tSTATE_HIT: the player has been hit.\n\tSTATE_DOWN: after being killed, before reappearing.\n\tSTATE_END: the amount of remaining lives has become 0 (game over)." },
		{ "sig": "Player::GetPlayerLife()\treal", "doc": "Gets the player's life points." },
		{ "sig": "Player::GetPlayerSpell()\treal", "doc": "Gets the amount of bombs remaining." },
		{ "sig": "Player::GetPlayerPower()\treal", "doc": "Gets the amount of power points." },
		{ "sig": "Player::GetPlayerInvincibilityFrame()\treal", "doc": "Gets the amount of frames the player is invincible." },
		{ "sig": "Player::GetPlayerDownStateFrame()\treal", "doc": "Returns the amount of frames that the player will spend in the down state." },
		{ "sig": "Player::GetPlayerRebirthFrame()\treal", "doc": "Gets the amount of frames the player can counter bomb." },
		{ "sig": "Player::GetAngleToPlayer(obj)\treal", "doc": "Parameters:\n\t1) object ID\nGets the angle from the object with specified ID to the player." },
		{ "sig": "Player::IsPermitPlayerShot()\tbool", "doc": "Returns true if the player can use normal shots." },
		{ "sig": "Player::IsPermitPlayerSpell()\tbool", "doc": "Returns true if the player can use bombs.\nThe returned value may differ from a previously set SetForbidPlayerSpell. For instance, it is forced to false during a LastSpell." },
		{ "sig": "Player::IsPlayerLastSpellWait()\tbool", "doc": "Returns true if the player is counter bombing." },
		{ "sig": "Player::IsPlayerSpellActive()\tbool", "doc": "Returns true if the player is currently using a bomb (not only the button press)." },
		{ "sig": "Player::GetPlayerID()\tchar", "doc": "Returns the system ID of the player script.\nThis value is defined inside the player script in the #ID header." },
		{ "sig": "Player::GetPlayerReplayName()\tchar", "doc": "Returns the replay ID of the player.\nThis value is defined inside the player script in the #ReplayName header." },


		//Enemy functions

		{ "sig": "Enemy::GetEnemyBossSceneObjectID()\tobj", "doc": "" },
		{ "sig": "Enemy::GetEnemyBossObjectID()\tobj[]", "doc": "" },
		{ "sig": "Enemy::GetAllEnemyID()\tobj[]", "doc": "" },
		{ "sig": "Enemy::GetIntersectionRegistedEnemyID()\tobj[]", "doc": "" },
		{ "sig": "Enemy::GetAllEnemyIntersectionPosition()\treal[][]", "doc": "" },
		{ "sig": "Enemy::GetEnemyIntersectionPosition(x, y, max_num)\treal[][]", "doc": "" },
		{ "sig": "Enemy::GetEnemyIntersectionPositionByIdA1(obj)\treal[][]", "doc": "" },
		{ "sig": "Enemy::GetEnemyIntersectionPositionByIdA2(obj, x, y)\treal[][]", "doc": "" },
		{ "sig": "Enemy::LoadEnemyShotData(path)\tvoid", "doc": "" },
		{ "sig": "Enemy::ReloadEnemyShotData(path)\tvoid", "doc": "" },

		//Shot functions

		{ "sig": "Shot::DeleteShotAll(bullet_type, delete_type)\tvoid", "doc": "" },
		{ "sig": "Shot::DeleteShotInCircle(bullet_type, delete_type, x, y, r)\tvoid", "doc": "" },
		{ "sig": "Shot::CreateShotA1(x, y, s, a, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::CreateShotA2(x, y, s, a, acc, max_s, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::CreateShotOA1(obj, speed, angle, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::CreateShotB1(x, y, x_spd, y_spd, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::CreateShotB2(x, y, x_spd, y_spd, x_acc, y_acc, x_max, y_max, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::CreateShotOB1(obj, x, y, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::CreateLooseLaserA1(x, y, s, a, l, w, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::CreateStraightLaserA1(x, y, a, l, w, f, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::CreateCurveLaserA1(x, y, s, a, l, w, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::SetShotIntersectionCircle(x, y, r)\tvoid", "doc": "" },
		{ "sig": "Shot::SetShotIntersectionLine(start_x, start_y, end_x, end_y, r)\tvoid", "doc": "" },
		{ "sig": "Shot::GetShotIdInCircleA1(x, y, r)\tobj[]", "doc": "" },
		{ "sig": "Shot::GetShotIdInCircleA2(x, y, r, target_type)\tobj[]", "doc": "" },
		{ "sig": "Shot::GetShotCount(target_type)\treal", "doc": "" },
		{ "sig": "Shot::SetShotAutoDeleteClip(l, t, r, b)\tvoid", "doc": "" },
		{ "sig": "Shot::GetShotDataInfoA1(graphic, target_type, info_type)\tdepend", "doc": "" },

		//Item functions

		{ "sig": "Item::CreateItemA1(item_type, x, y, score)\tobj", "doc": "" },
		{ "sig": "Item::CreateItemA2(item_type, x, y, x_dest, y_dest, score)\tobj", "doc": "" },
		{ "sig": "Item::CreateItemU1(id, x, y, score)\tobj", "doc": "" },
		{ "sig": "Item::CreateItemU2(id, x, y, x_dest, y_dest, score)\tobj", "doc": "" },
		{ "sig": "Item::CollectAllItems()\tvoid", "doc": "" },
		{ "sig": "Item::CollectItemsByType(item_type)\tvoid", "doc": "" },
		{ "sig": "Item::CollectItemsInCircle(x, y, r)\tvoid", "doc": "" },
		{ "sig": "Item::CancelCollectItems()\tvoid", "doc": "" },
		{ "sig": "Item::StartItemScript(path)\tvoid", "doc": "" },
		{ "sig": "Item::LoadItemData(path)\tvoid", "doc": "" },
		{ "sig": "Item::ReloadItemData(path)\tvoid", "doc": "" },
		{ "sig": "Item::SetDefaultBonusItemEnable(use)\tvoid", "doc": "" },

		//Other functions

		{ "sig": "Other::StartSlow(obj, fps)\tvoid", "doc": "" },
		{ "sig": "Other::StopSlow(obj)\tvoid", "doc": "" },
		{ "sig": "Other::IsIntersected_Line_Circle(start_x, start_y, end_x, end_y, w, x, y, r)\tbool", "doc": "" },
		{ "sig": "Other::IsIntersected_Obj_Obj(obj1, obj2)\tbool", "doc": "" },
		{ "sig": "Other::GetObjectDistance(obj1, obj2)\tvoid", "doc": "" },
		{ "sig": "Other::GetObject2dPosition(obj)\treal[]", "doc": "" },
		{ "sig": "Other::Get2dPosition(x, y, z)\treal[]", "doc": "" },

		// Generic Object functions

		{ "sig": "Obj_Delete(obj)\tvoid", "doc": "Parameters:\n\t1) object ID\nDeletes specified object." },
		{ "sig": "Obj_IsDeleted(obj)\tbool", "doc": "Parameters:\n\t1) object ID\nReturns true if the specified object has been deleted." },
		{ "sig": "Obj_SetVisible(obj, visible)\tvoid", "doc": "Parameters:\n\t1) object ID\n\t2) visible (bool)\nSets visibility of specified object.\nIf visible is set to false, the object will not be drawn." },
		{ "sig": "Obj_IsVisible(obj)\tbool", "doc": "Parameters:\n\t1) object ID\nReturns true if the specified object is visible." },
		{ "sig": "Obj_SetRenderPriority(obj, priority_ratio)\tvoid", "doc": "Parameters:\n\t1) object ID\n\t2) render priority (0.0-1.0)\nSets the object's render priority as a ratio (0.0-1.0)." },
		{ "sig": "Obj_SetRenderPriorityI(obj, priority)\tvoid", "doc": "Parameters:\n\t1) object ID\n\t2) render priority (0-100)\nSets the object's render priority in the range 0-100 (integer)." },
		{ "sig": "Obj_GetRenderPriority(obj)\treal", "doc": "Parameters:\n\t1) object ID\nReturns the object's render priority as a ratio (0.0-1.0)." },
		{ "sig": "Obj_GetRenderPriorityI(obj)\treal", "doc": "Parameters:\n\t1) object ID\nReturns the object's render priority as an integer (0-100)." },
		{ "sig": "Obj_GetValue(obj, key)\tfree", "doc": "Parameters:\n\t1) object ID\n\t2) key (char)\nReturns the value associated with the given key for the given object, previously set by Obj_SetValue().\nWarning: If the key-value pair does not exist or was deleted, attempting to access it will crash the program." },
		{ "sig": "Obj_GetValueD(obj, key, default)\tfree", "doc": "Parameters:\n\t1) object ID\n\t2) key (char)\n\t3) default value (arbitrary type)\nReturns the value associated with the given key for the given object, previously set by Obj_SetValue().\nIf the key-value pair doesn't exist, the default value is returned instead." },
		{ "sig": "Obj_SetValue(obj, key, value)\tvoid", "doc": "Parameters:\n\t1) object ID\n\t2) key (char)\n\t3) value (arbitrary type)\nFor the given object, maps the given key to the given value.\nThe value can be returned by using Obj_GetValue() with the corresponding key." },
		{ "sig": "Obj_DeleteValue(obj, key)\tvoid", "doc": "Parameters:\n\t1) object ID\n\t2) key (char)\nDeletes the key-value pair previously set by Obj_SetValue()." },
		{ "sig": "Obj_IsValueExists(obj, key)\tbool", "doc": "Parameters:\n\t1) object ID\n\t2) key (char)\nChecks whether the object has a key-value pair for the given key and returns true if it does." },
		{ "sig": "Obj_GetType(obj)\tconstant", "doc": "Parameters:\n\t1) object ID\nReturns the type of object." },

		// Render Object functions

		{ "sig": "ObjRender_SetX(obj, x)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetY(obj, y)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetZ(obj, z)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetPosition(obj, x, y, z)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetAngleX(obj, x_angle)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetAngleY(obj, y_angle)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetAngleZ(obj, z_angle)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetAngleXYZ(obj, x, y, z)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetScaleX(obj, x_scale)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetScaleY(obj, y_scale)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetScaleZ(obj, z_scale)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetScaleXYZ(obj, x, y, z)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetColor(obj, r, g, b)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetColorHSV(obj, h, s, v)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetAlpha(obj, alpha)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetBlendType(obj, blend_type)\tvoid", "doc": "" },
		{ "sig": "ObjRender_GetX(obj)\treal", "doc": "" },
		{ "sig": "ObjRender_GetY(obj)\treal", "doc": "" },
		{ "sig": "ObjRender_GetZ(obj)\treal", "doc": "" },
		{ "sig": "ObjRender_GetAngleX(obj)\treal", "doc": "" },
		{ "sig": "ObjRender_GetAngleY(obj)\treal", "doc": "" },
		{ "sig": "ObjRender_GetAngleZ(obj)\treal", "doc": "" },
		{ "sig": "ObjRender_GetScaleX(obj)\treal", "doc": "" },
		{ "sig": "ObjRender_GetScaleY(obj)\treal", "doc": "" },
		{ "sig": "ObjRender_GetScaleZ(obj)\treal", "doc": "" },
		{ "sig": "ObjRender_GetBlendType(obj)\tconstant", "doc": "" },
		{ "sig": "ObjRender_SetZWrite(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetZTest(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetFogEnable(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjRender_SetPermitCamera(obj, enable)\tvoid", "doc": "" },

		// Primitive Object functions

		{ "sig": "ObjPrim_Create(obj_type)\tobj", "doc": "" },
		{ "sig": "ObjPrim_SetPrimitiveType(prim_type)\tvoid", "doc": "" },
		{ "sig": "ObjPrim_SetVertexCount(obj, vertices)\tvoid", "doc": "" },
		{ "sig": "ObjPrim_GetVertexCount(obj)\treal", "doc": "" },
		{ "sig": "ObjPrim_SetTexture(obj, path)\tvoid", "doc": "" },
		{ "sig": "ObjPrim_SetVertexPosition(obj, i, x, y, z)\tvoid", "doc": "" },
		{ "sig": "ObjPrim_GetVertexPosition(obj, i)\treal[]", "doc": "" },
		{ "sig": "ObjPrim_SetVertexUV(obj, i, x_frac, y_frac)\tvoid", "doc": "" },
		{ "sig": "ObjPrim_SetVertexUVT(obj, i, x, y)\tvoid", "doc": "" },
		{ "sig": "ObjPrim_SetVertexColor(obj, i, r, g, b)\tvoid", "doc": "" },
		{ "sig": "ObjPrim_SetVertexAlpha(obj, i, alpha)\tvoid", "doc": "" },

		// 2D Sprite Object functions

		{ "sig": "ObjSprite2D_SetSourceRect(obj, l, t, r, b)\tvoid", "doc": "" },
		{ "sig": "ObjSprite2D_SetDestRect(obj, l, t, r, b)\tvoid", "doc": "" },
		{ "sig": "ObjSprite2D_SetDestCenter(obj)\tvoid", "doc": "" },

		// 2D Sprite List Object functions

		{ "sig": "ObjSpriteList2D_SetSourceRect(obj, l, t, r, b)\tvoid", "doc": "" },
		{ "sig": "ObjSpriteList2D_SetDestRect(obj, l, t, r, b)\tvoid", "doc": "" },
		{ "sig": "ObjSpriteList2D_SetDestCenter(obj)\tvoid", "doc": "" },
		{ "sig": "ObjSpriteList2D_AddVertex(obj)\tvoid", "doc": "" },
		{ "sig": "ObjSpriteList2D_CloseVertex(obj)\tvoid", "doc": "" },
		{ "sig": "ObjSpriteList2D_ClearVertexCount(obj)\tvoid", "doc": "" },

		// 3D Sprite Object functions

		{ "sig": "ObjSprite3D_SetSourceRect(obj, l, t, r, b)\tvoid", "doc": "" },
		{ "sig": "ObjSprite3D_SetDestRect(obj, l, t, r, b)\tvoid", "doc": "" },
		{ "sig": "ObjSprite3D_SetSourceDestRect(obj, l, t, r, b)\tvoid", "doc": "" },
		{ "sig": "ObjSprite3D_SetBillboard(obj, enable)\tvoid", "doc": "" },

		// 3D Mesh Object functions

		{ "sig": "ObjMesh_Create()\tobj", "doc": "" },
		{ "sig": "ObjMesh_Load(obj, path)\tvoid", "doc": "" },
		{ "sig": "ObjMesh_SetColor(obj, r, g, b)\tvoid", "doc": "" },
		{ "sig": "ObjMesh_SetAlpha(obj, alpha)\tvoid", "doc": "" },
		{ "sig": "ObjMesh_SetAnimation(obj, name, frame)\tvoid", "doc": "" },
		{ "sig": "ObjMesh_SetCoordinate2D(obj, allow)\tvoid", "doc": "" },

		// Text Object functions

		{ "sig": "ObjText_Create()\tobj", "doc": "" },
		{ "sig": "ObjText_SetText(obj, str)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetFontType(obj, font_name)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetFontSize(obj, size)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetFontBold(obj, bold)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetFontColorTop(obj, r, g, b)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetFontColorBottom(obj, r, g, b)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetFontBorderWidth(obj, width)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetFontBorderType(obj, border_type)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetFontBorderColor(obj, r, g, b)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetMaxWidth(obj, width)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetMaxHeight(obj, height)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetLinePitch(obj, pitch)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetSidePitch(obj, pitch)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetTransCenter(obj, x, y)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetAutoTransCenter(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetHorizontalAlignment(obj, align_type)\tvoid", "doc": "" },
		{ "sig": "ObjText_SetSyntacticAnalysis(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjText_GetTextLength(obj)\treal", "doc": "" },
		{ "sig": "ObjText_GetTextLengthCU(obj)\treal", "doc": "" },
		{ "sig": "ObjText_GetTextLengthCUL(obj)\treal[]", "doc": "" },
		{ "sig": "ObjText_GetTotalWidth(obj)\treal", "doc": "" },
		{ "sig": "ObjText_GetTotalHeight(obj)\treal", "doc": "" },

		// Sound Object functions

		{ "sig": "ObjSound_Create()\tobj", "doc": "" },
		{ "sig": "ObjSound_Load(obj, path)\tvoid", "doc": "" },
		{ "sig": "ObjSound_Play(obj)\tvoid", "doc": "" },
		{ "sig": "ObjSound_Stop(obj)\tvoid", "doc": "" },
		{ "sig": "ObjSound_SetVolumeRate(obj, volume)\tvoid", "doc": "" },
		{ "sig": "ObjSound_SetPanRate(obj, pan)\tvoid", "doc": "" },
		{ "sig": "ObjSound_SetFade(obj, fade_rate)\tvoid", "doc": "" },
		{ "sig": "ObjSound_SetLoopEnable(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjSound_SetLoopTime(obj, start, end)\tvoid", "doc": "" },
		{ "sig": "ObjSound_SetLoopSampleCount(obj, start, end)\tvoid", "doc": "" },
		{ "sig": "ObjSound_SetRestartEnable(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjSound_SetSoundDivision(obj, sound_type)\tvoid", "doc": "" },
		{ "sig": "ObjSound_IsPlaying(obj)\tbool", "doc": "" },
		{ "sig": "ObjSound_GetVolumeRate(obj)\treal", "doc": "" },

		// File Object functions

		{ "sig": "ObjFile_Create(obj_type)\tobj", "doc": "" },
		{ "sig": "ObjFile_Open(obj, path)\tbool", "doc": "" },
		{ "sig": "ObjFile_OpenNW(obj, path)\tbool", "doc": "" },
		{ "sig": "ObjFile_Store(obj)\tbool", "doc": "" },
		{ "sig": "ObjFile_GetSize(obj)\treal", "doc": "" },

		// Text File Object functions

		{ "sig": "ObjFileT_GetLineCount(obj)\treal", "doc": "" },
		{ "sig": "ObjFileT_GetLineText(obj, line_num)\tchar", "doc": "" },
		{ "sig": "ObjFileT_AddLine(obj, str)\tvoid", "doc": "" },
		{ "sig": "ObjFileT_ClearLine(obj)\tvoid", "doc": "" },
		{ "sig": "ObjFileT_SplitLineText(obj, line_num, delimiter)\tchar[]", "doc": "" },

		// Binary File Object functions

		{ "sig": "ObjFileB_SetByteOrder(obj, endian_type)\tvoid", "doc": "" },
		{ "sig": "ObjFileB_SetCharacterCode(obj, encode_type)\tvoid", "doc": "" },
		{ "sig": "ObjFileB_GetPointer(obj)\treal", "doc": "" },
		{ "sig": "ObjFileB_Seek(obj, pointer)\tvoid", "doc": "" },
		{ "sig": "ObjFileB_ReadBoolean(obj)\tbool", "doc": "" },
		{ "sig": "ObjFileB_ReadByte(obj)\treal", "doc": "" },
		{ "sig": "ObjFileB_ReadShort(obj)\treal", "doc": "" },
		{ "sig": "ObjFileB_ReadInteger(obj)\treal", "doc": "" },
		{ "sig": "ObjFileB_ReadLong(obj)\treal", "doc": "" },
		{ "sig": "ObjFileB_ReadFloat(obj)\treal", "doc": "" },
		{ "sig": "ObjFileB_ReadDouble(obj)\treal", "doc": "" },
		{ "sig": "ObjFileB_ReadString(obj, size)\tchar", "doc": "" },

		// Move Object functions

		{ "sig": "ObjMove_SetX(obj, x)\tvoid", "doc": "" },
		{ "sig": "ObjMove_SetY(obj, y)\tvoid", "doc": "" },
		{ "sig": "ObjMove_SetPosition(obj, x, y)\tvoid", "doc": "" },
		{ "sig": "ObjMove_SetSpeed(obj, speed)\tvoid", "doc": "" },
		{ "sig": "ObjMove_SetAngle(obj, angle)\tvoid", "doc": "" },
		{ "sig": "ObjMove_SetAcceleration(obj, accel)\tvoid", "doc": "" },
		{ "sig": "ObjMove_SetMaxSpeed(obj, max)\tvoid", "doc": "" },
		{ "sig": "ObjMove_SetAngularVelocity(obj, ang_vel)\tvoid", "doc": "" },
		{ "sig": "ObjMove_SetDestAtSpeed(obj, x, y, speed)\tvoid", "doc": "" },
		{ "sig": "ObjMove_SetDestAtFrame(obj, x, y, frames)\tvoid", "doc": "" },
		{ "sig": "ObjMove_SetDestAtWeight(obj, x, y, weight, max_s)\tvoid", "doc": "" },
		{ "sig": "ObjMove_AddPatternA1(obj, f, spd, ang)\tvoid", "doc": "" },
		{ "sig": "ObjMove_AddPatternA2(obj, f, spd, ang, acc, ang_vel, max_s)\tvoid", "doc": "" },
		{ "sig": "ObjMove_AddPatternA3(obj, f, spd, ang, acc, ang_vel, max_s, g)\tvoid", "doc": "" },
		{ "sig": "ObjMove_AddPatternA4(obj, f, spd, ang, acc, ang_vel, max_s, target, g)\tvoid", "doc": "" },
		{ "sig": "ObjMove_AddPatternB1(obj, f, x_spd, y_spd)\tvoid", "doc": "" },
		{ "sig": "ObjMove_AddPatternB2(obj, f, x_spd, y_spd, x_acc, y_acc, x_max, y_max)\tvoid", "doc": "" },
		{ "sig": "ObjMove_AddPatternB3(obj, f, x_spd, y_spd, x_acc, y_acc, x_max, y_max, g)\tvoid", "doc": "" },
		{ "sig": "ObjMove_GetX(obj)\treal", "doc": "" },
		{ "sig": "ObjMove_GetY(obj)\treal", "doc": "" },
		{ "sig": "ObjMove_GetSpeed(obj)\treal", "doc": "" },
		{ "sig": "ObjMove_GetAngle(obj)\treal", "doc": "" },

		// Enemy Object functions

		{ "sig": "ObjEnemy_Create(obj_type)\tobj", "doc": "" },
		{ "sig": "ObjEnemy_Regist(obj)\tvoid", "doc": "" },
		{ "sig": "ObjEnemy_GetInfo(obj, info_type)\tdepend", "doc": "" },
		{ "sig": "ObjEnemy_SetLife(obj, life)\tvoid", "doc": "" },
		{ "sig": "ObjEnemy_AddLife(obj, life)\tvoid", "doc": "" },
		{ "sig": "ObjEnemy_SetDamageRate(obj, shot_rate, bomb_rate)\tvoid", "doc": "" },
		{ "sig": "ObjEnemy_SetIntersectionCircleToShot(obj, x, y, r)\tvoid", "doc": "" },
		{ "sig": "ObjEnemy_SetIntersectionCircleToPlayer(obj, x, y, r)\tvoid", "doc": "" },

		// Boss Scene Object functions

		{ "sig": "ObjEnemyBossScene_Create()\tobj", "doc": "" },
		{ "sig": "ObjEnemyBossScene_Regist(obj)\tvoid", "doc": "" },
		{ "sig": "ObjEnemyBossScene_Add(obj, phase, path)\tvoid", "doc": "" },
		{ "sig": "ObjEnemyBossScene_LoadInThread(obj)\tvoid", "doc": "" },
		{ "sig": "ObjEnemyBossScene_GetInfo(obj, info_type)\tdepend", "doc": "" },
		{ "sig": "ObjEnemyBossScene_SetSpellTimer(obj, time)\tvoid", "doc": "" },
		{ "sig": "ObjEnemyBossScene_StartSpell(obj)\tvoid", "doc": "" },

		// Shot Object functions

		{ "sig": "ObjShot_Create(obj_type)\tobj", "doc": "" },
		{ "sig": "ObjShot_Regist(obj)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetAutoDelete(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjShot_FadeDelete(obj)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetDeleteFrame(obj, frame)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetDelay(obj, frames)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetSpellResist(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetGraphic(obj, g)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetSourceBlendType(obj, blend_type)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetDamage(obj, damage)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetPenetration(obj, num)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetEraseShot(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetSpellFactor(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjShot_ToItem(obj)\tvoid", "doc": "" },
		{ "sig": "ObjShot_AddShotA1(obj, target, frame)\tvoid", "doc": "" },
		{ "sig": "ObjShot_AddShotA2(obj, target, frame, dist, angle)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetIntersectionCircleA1(obj, r)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetIntersectionCircleA2(obj, x, y, r)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetIntersectionLine(obj, x1, y1, x2, y2, width)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetIntersectionEnable(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjShot_SetItemChange(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjShot_IsSpellResist(obj)\tbool", "doc": "" },
		{ "sig": "ObjShot_GetImageID(obj)\treal", "doc": "" },
		{ "sig": "ObjLaser_SetLength(obj, length)\tvoid", "doc": "" },
		{ "sig": "ObjLaser_SetRenderWidth(obj, width)\tvoid", "doc": "" },
		{ "sig": "ObjLaser_SetIntersectionWidth(obj, width)\tvoid", "doc": "" },
		{ "sig": "ObjLaser_SetGrazeInvalidFrame(obj, frames)\tvoid", "doc": "" },
		{ "sig": "ObjLaser_SetInvalidLength(obj, start_len, end_len)\tvoid", "doc": "" },
		{ "sig": "ObjLaser_GetLength(obj)\treal", "doc": "" },
		{ "sig": "ObjStLaser_SetAngle(obj, angle)\tvoid", "doc": "" },
		{ "sig": "ObjStLaser_GetAngle(obj)\treal", "doc": "" },
		{ "sig": "ObjStLaser_SetSource(obj, show)\tvoid", "doc": "" },
		{ "sig": "ObjCrLaser_SetTipDecrement(obj, transparency_rate)\tvoid", "doc": "" },

		// Item Object functions

		{ "sig": "ObjItem_SetItemID(obj, item_id)\tvoid", "doc": "" },
		{ "sig": "ObjItem_SetRenderScoreEnable(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjItem_SetAutoCollectEnable(obj, enable)\tvoid", "doc": "" },
		{ "sig": "ObjItem_SetDefinedMovePatternA1(obj, move_type)\tvoid", "doc": "" },
		{ "sig": "ObjItem_GetInfo(obj, info_type)\tdepend", "doc": "" },

		// Player Object functions

		{ "sig": "ObjPlayer_AddIntersectionCircleA1(obj, off_x, off_y, hit_r, graze_r)\tvoid", "doc": "" },
		{ "sig": "ObjPlayer_ClearIntersection(obj)\tvoid", "doc": "" },

		// Collision Object functions

		{ "sig": "ObjCol_IsIntersected(obj)\tbool", "doc": "" },
		{ "sig": "ObjCol_GetListOfIntersectedEnemyID(obj)\tobj[]", "doc": "" },
		{ "sig": "ObjCol_GetIntersectedCount(obj)\treal", "doc": "" }


		// Note: Must not have trailing comma for ST2 compatibility
	]
}