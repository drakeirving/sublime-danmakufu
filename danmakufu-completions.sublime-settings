{
	"scope": "source.danmakufu",

	"dict":
	[

		// Math functions

		{ "sig": "Math::min(a, b)\treal", "doc": "Parameters:\n\t1) value 1\n\t2) value 2\nReturns the minimum of the two values." },
		{ "sig": "Math::max(a, b)\treal", "doc": "Parameters:\n\t1) value 1\n\t2) value 2\nReturns the maximum of the two values." },
		{ "sig": "Math::log(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the natural log (base e) of the value" },
		{ "sig": "Math::log10(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the common log (base 10) of the value" },
		{ "sig": "Math::cos(angle)\treal", "doc": "Parameters:\n\t1) value\nReturns the cosine of the angle.\nThe cosine of an angle is a value between -1 and 1 that corresponds to the x-coordinate of the angle on the unit circle." },
		{ "sig": "Math::sin(angle)\treal", "doc": "Parameters:\n\t1) value\nReturns the sine of the angle.\nThe sine of an angle is a value between -1 and 1 that corresponds to the y-coordinate of the angle on the unit circle." },
		{ "sig": "Math::tan(angle)\treal", "doc": "Parameters:\n\t1) value\nReturns the tangent of the angle.\ntan(x) = sin(x)/cos(x). The tangent of an angle in a right triangle is the ratio of the opposite and adjacent side lengths." },
		{ "sig": "Math::acos(x)\treal", "doc": "Parameters:\n\t1) value\nReturns the arccosine of the value.\nacos(cos(x)) = x, if x is between 0 and 180." },
		{ "sig": "Math::asin(y)\treal", "doc": "Parameters:\n\t1) value\nReturns the arcsine of the value.\nasin(sin(x)) = x, if x is between -90 and 90." },
		{ "sig": "Math::atan(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the arctangent of the value.\natan(tan(x)) = x, if x is between -90 and 90." },
		{ "sig": "Math::atan2(y, x)\treal", "doc": "Parameters:\n\t1) y value\n\t2) x value\nReturns the arctangent of y/x, which can be seen as the angle from (0, 0) to (x, y). The angle will be in the range -180 < a <= 180, where a is the returned value.\nUseful for getting the angle from one point to another point. For example, the angle from the boss to the player is atan2(player_y - boss_y, player_x - boss_x)." },
		{ "sig": "Math::rand(min, max)\treal", "doc": "Parameters:\n\t1) min value\n\t2) max value\nReturns a random number between min and max.\nNote that the random value is a real number, not an integer; if you need one, use either round(), ceil(), or floor() on the returned value." },
		{ "sig": "Math::round(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the value as an integer. Values of 0.5 or greater are rounded up; otherwise they are rounded down." },
		{ "sig": "Math::truncate(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the value with no decimal places. For instance, 1.123 becomes 1." },
		{ "sig": "Math::trunc(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the value with no decimal places. For instance, 1.123 becomes 1." },
		{ "sig": "Math::ceil(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the value rounded up to the next integer." },
		{ "sig": "Math::floor(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the value rounded down to the next integer." },
		{ "sig": "Math::absolute(a)\treal", "doc": "Parameters:\n\t1) value\nReturns the value as an absolute number (if it is negative, it will be changed to a positive)." },
		{ "sig": "Math::modc(a, mod)\treal", "doc": "Parameters:\n\t1) value\n\t2) divisor\nReturns the value, modulo the divisor.\nModulus provides the remainder of the division (7 modulo 5 would be 2)." },

		// String functions

		{ "sig": "String::InstallFont(path)\tbool", "doc": "Parameters:\n\t1) path to font\nLoads the given font, which can be used with ObjText_SetFontType, allowing for usage of fonts that are not standard to Windows.[r]Returns true if successful." },
		{ "sig": "String::ToString(a)\tchar", "doc": "Parameters:\n\t1) value\nReturns the value as a string, able to be used by text functions." },
		{ "sig": "String::IntToString(num)\tchar", "doc": "Parameters:\n\t1) value\nReturns the value as a string. Omits any decimal places." },
		{ "sig": "String::itoa(num)\tchar", "doc": "Parameters:\n\t1) value\nConverts an integer value to an array form, but leaves out decimal places." },
		{ "sig": "String::rtoa(num)\tchar", "doc": "Parameters:\n\t1) value\nConverts any real number to an array format." },
		{ "sig": "String::rtos(format, num)\tchar", "doc": "Parameters:\n\t1) format\n\t2) value\nReturns the value as a string, with some filtering options.\nThe format is presented as a string that determines how many digits will be shown; it can contain any combination of the following three characters: 0, ., #.\n0 is a slot for a digit. . represents the decimal place in the string. # creates a space in the string." },
		{ "sig": "String::vtos(format, num)\tchar", "doc": "Parameters:\n\t1) format\n\t2) value" },
		{ "sig": "String::atoi(str)\treal", "doc": "Parameters:\n\t1) value\nTakes the contents of an array and converts it into an integer." },
		{ "sig": "String::ator(str)\treal", "doc": "Parameters:\n\t1) value\nTakes the contents of an array and converts it into a real number." },
		{ "sig": "String::TrimString(str)\tchar", "doc": "Parameters:\n\t1) String\nReturns the string with spaces removed from the beginning and ending of the text." },
		{ "sig": "String::SplitString(str, delimiter)\tchar[]", "doc": "Parameters:\n\t1) Original String\n\t2) delimiter\nReturns an array containing the split strings." },

		// Path functions

		{ "sig": "Path::GetFileDirectory(path)\tchar", "doc": "Parameters:\n\t1) file path (char)\nReturns the directory of the specified file path.\nSpecifically, returns the input string up to the rightmost forward slash, with backslashes removed." },
		{ "sig": "Path::GetDirectoryList(path)\tstring[]", "doc": "Parameters:\n\t1) file/folder path (char)\nReturns an array of the directories available within the directory of the specified path." },
		{ "sig": "Path::GetModuleDirectory()\tchar", "doc": "Returns the directory containing the running th_dnh.exe file." },
		{ "sig": "Path::GetMainStgScriptPath()\tchar", "doc": "Returns the path of the current stage of the script running." },
		{ "sig": "Path::GetMainPackageScriptPath()\tchar", "doc": "Returns the directory of the currently running package script." },
		{ "sig": "Path::GetMainStgScriptDirectory()\tchar", "doc": "Returns the directory of the current stage of the script running." },
		{ "sig": "Path::GetCurrentScriptDirectory()\tchar", "doc": "Returns the directory of the file in which this function was called." },
		{ "sig": "Path::GetScriptPathList(folder, type)\tstring[]", "doc": "Parameters:\n\t1) file/folder path (char)\n\t2) script type (constant)\nReturns an array of available (selectable at selection screen) scripts of the specified type within the directory of the specified path.\nScript types are:\n\tTYPE_SCRIPT_ALL: All scripts\n\tTYPE_SCRIPT_PLAYER: Player scripts\n\tTYPE_SCRIPT_SINGLE: Single scripts\n\tTYPE_SCRIPT_PLURAL: Plural scripts\n\tTYPE_SCRIPT_STAGE: Stage scripts\n\tTYPE_SCRIPT_PACKAGE: Package scripts" },

		// Time functions

		{ "sig": "Time::GetCurrentDateTimeS()\tchar", "doc": "Returns a string containing the current date and time.\nFor example, if the current date is 2012/09/16 12:34:56, then 20120916123456 will be returned." },
		{ "sig": "Time::GetStageTime()\treal", "doc": "Returns a number with the amount of time that has been elapsed since the start of the main script.\nThe value is in milliseconds." },
		{ "sig": "Time::GetPackageTime()\treal", "doc": "Returns a number with the amount of time that has been elapsed since the start of the package script.\nThe value is in milliseconds." },
		{ "sig": "Time::GetCurrentFps()\treal", "doc": "Returns the current FPS." },
		{ "sig": "Time::GetReplayFps()\treal", "doc": "Returns the FPS of the replay at the current time.\nNote that this value refreshes as a much slower rate than GetCurrentFps." },

		// Debug functions

		{ "sig": "Debug::WriteLog(string)\tvoid", "doc": "Parameters:\n\t1) String\nOutputs the given string to the log file." },
		{ "sig": "Debug::RaiseError(string)\tvoid", "doc": "Parameters:\n\t1) String\nCreates an error box with the specified string.\nExecution of the script is stopped, closing the script." },

		// Common Data functions

		{ "sig": "CommonData::SetCommonData(key, value)\tvoid", "doc": "Parameters:\n\t1) key (char)\n\t2) value (free)\nMaps the given key to the given value in common data. Uses the default common data area.\nThe value can be returned by using GetCommonData with the corresponding key." },
		{ "sig": "CommonData::GetCommonData(key, default)\tfree", "doc": "Parameters:\n\t1) key (char)\n\t2) default value (free)\nReturns the value associated with the given key in common data. Returns the default value if no value had been stored to it previously." },
		{ "sig": "CommonData::ClearCommonData()\tvoid", "doc": "Removes all of the common data in the default common data area." },
		{ "sig": "CommonData::DeleteCommonData(key)\tvoid", "doc": "Parameters:\n\t1) key (char)\nRemoves the common data mapping with the specified key." },
		{ "sig": "CommonData::SetAreaCommonData(area, key, value)\tvoid", "doc": "Parameters:\n\t1) common data area (char)\n\t2) key (char)\n\t3) value (free)\nMaps the given key to the given value in the specified area in common data.\nThe value can be returned by using GetAreaCommonData with the corresponding area and key." },
		{ "sig": "CommonData::GetAreaCommonData(area, key, default)\tfree", "doc": "Parameters:\n\t1) common data area (char)\n\t2) key (char)\n\t3) default value (free)\nReturns the value associated with the given key in the specified area in common data.\nReturns the default value if no value had been stored to it previously." },
		{ "sig": "CommonData::ClearAreaCommonData(area)\tvoid", "doc": "Parameters:\n\t1) common data area (char)\nRemoves all of the common data in the specified area." },
		{ "sig": "CommonData::DeleteAreaCommonData(area, key)\tvoid", "doc": "Parameters:\n\t1) common data area (char)\n\t2) key (char)\nRemoves the common data mapping with the specified key in the specified area." },
		{ "sig": "CommonData::CreateCommonDataArea(area)\tvoid", "doc": "Parameters:\n\t1) common data area name (char)\nCreates a common data area to organize common data together.\nA common data area \"\" (empty string) has been created by default, which is also used by the SetCommonData series." },
		{ "sig": "CommonData::IsCommonDataAreaExists(area)\tbool", "doc": "Parameters:\n\t1) common data area (char)\nReturns whether the specified common data area exists." },
		{ "sig": "CommonData::CopyCommonDataArea(area1, area2)\tvoid", "doc": "Parameters:\n\t1) destination common data area\n\t2) source common data area\nCopies the common data in the source area to the destination area. If the source common data area is invalid, nothing will happen." },
		{ "sig": "CommonData::GetCommonDataAreaKeyList()\tchar[]", "doc": "Returns an array of all common data area names." },
		{ "sig": "CommonData::GetCommonDataValueKeyList(area)\tchar[]", "doc": "Parameters:\n\t1) common data area\nReturns an array of the keys in the specified area." },
		{ "sig": "CommonData::SaveCommonDataAreaA1(area)\tbool", "doc": "Parameters:\n\t1) common data area (char)\nSaves everything in the specified common data area to a data file.\nReturns true if successful and false if the operation failed." },
		{ "sig": "CommonData::LoadCommonDataAreaA1(area)\tbool", "doc": "Parameters:\n\t1) common data area (char)\nLoads everything in the specified common data area from the saved data file.\nReturns true if successful and false if the operation failed." },
		{ "sig": "CommonData::SaveCommonDataAreaA2(area, path)\tbool", "doc": "Parameters:\n\t1) common data area (char)\n\t2) file path (char)\nSaves everything in the specified common data area to a data file at the specified path.\nReturns true if successful and false if the operation failed." },
		{ "sig": "CommonData::LoadCommonDataAreaA2(area, path)\tbool", "doc": "Parameters:\n\t1) common data area (char)\n\t2) file path (char)\nLoads everything in the specified common data area from the saved data file at the specified path.\nReturns true if successful and false if the operation failed." },
		{ "sig": "CommonData::SaveCommonDataAreaToReplayFile(area)\tbool", "doc": "Parameters:\n\t1) common data area (char)\nSaves the specified common data area to the replay file. Returns true if successful and false if the operation failed. If this function is called during a replay, Danmakufu will present an error." },
		{ "sig": "CommonData::LoadCommonDataAreaFromReplayFile(area)\tbool", "doc": "Parameters:\n\t1) common data area (char)\nLoads the specified common data area from the replay file. Returns true if successful and false if the operation failed. If this function is called during gameplay, Danmakufu will present an error." },

		// Audio functions

		{ "sig": "Audio::LoadSound(path)\tvoid", "doc": "Parameters:\n\t1) path\nLoads specified sound file." },
		{ "sig": "Audio::RemoveSound(path)\tvoid", "doc": "Parameters:\n\t1) path\nRemoves specified sound file." },
		{ "sig": "Audio::PlayBGM(path, loop_start, loop_end)\tvoid", "doc": "Parameters:\n\t1) path\n\t2) loop start second (real)\n\t3) loop end second (real)\nPlays the specified sound file as a looping BGM.\nYou can be more precise by using decimals (for instance, if you want to loop from 2.5 seconds on, you can type 2.5)." },
		{ "sig": "Audio::PlaySE(path)\tvoid", "doc": "Parameters:\n\t1) path\nPlays specified sound file as a sound effect." },
		{ "sig": "Audio::StopSound(path)\tvoid", "doc": "Parameters:\n\t1) path\nStops specified sound file." },

		//Input functions

		{ "sig": "Input::GetVirtualKeyState(key)\tconstant", "doc": "Parameters:\n\t1) Virtual Key name\nReturns the state of the specified virtual key." },
		{ "sig": "Input::SetVirtualKeyState(key, state)\tvoid", "doc": "Parameters:\n\t1) Virtual Key name\n\t2) Virtual Key state\nSets the given virtual key to the given state.\nThe virtual key will be restored to its true state a frame after you stop calling this function.\nKeep in mind that if you set it to KEY_HOLD it will not go to KEY_PULL or KEY_PUSH." },
		{ "sig": "Input::AddVirtualKey(v_key, key, pad_key)\tvoid", "doc": "Parameters:\n\t1) Virtual Key name\n\t2) Key name\n\t3) Pad Key (KEY_INVALID if no pad input wanted)\nRegisters the given virtual key with the given key.\nYou may map any number of virtual keys to a single key, but virtual keys may only be mapped to a single key." },
		{ "sig": "Input::AddReplayTargetVirtualKey(key)\tvoid", "doc": "Parameters:\n\t1) Key name\nRegisters the given key id to the replay file.\nThis key id should be one that you have already registered with AddVirtualKey." },
		{ "sig": "Input::GetKeyState(key)\tconstant", "doc": "Parameters:\n\t1) Key name\nReturns the given key id's current state." },
		{ "sig": "Input::GetMouseState(button)\tconstant", "doc": "Parameters:\n\t1) Mouse button (MOUSE_LEFT, MOUSE_MIDDLE, MOUSE_RIGHT)\nReturns the given mouse button's current state." },
		{ "sig": "Input::GetMouseX()\treal", "doc": "Returns the mouse's X coordinate.\nThe origin for the mouse coordinates is the upper left of the Danmakufu window (0, 0)." },
		{ "sig": "Input::GetMouseY()\treal", "doc": "Returns the mouse's Y coordinate.\nThe origin for the mouse coordinates is the upper left of the Danmakufu window (0, 0)." },
		{ "sig": "Input::GetMouseMoveZ()\treal", "doc": "Returns the amount of change that has occurred to the mouse's Z axis.\nThe Z axis is normally the middle mouse wheel. If there is no mouse wheel, the value will be 0.\nThe value returned will be negative if the wheel was moved back, and positive if the wheel moved forward." },
		{ "sig": "Input::SetSkipModeKey(key)\tvoid", "doc": "Parameters:\n\t1) Key to be used for fast playback mode\nSpecifies the key to use for fast playback mode.\nThe default key is KEY_LCONTROL." },

		//Render functions

		{ "sig": "Render::LoadTexture(path)\tvoid", "doc": "" },
		{ "sig": "Render::LoadTextureInLoadThread(path)\tvoid", "doc": "" },
		{ "sig": "Render::RemoveTexture(path)\tvoid", "doc": "" },
		{ "sig": "Render::GetTextureWidth(path)\treal", "doc": "" },
		{ "sig": "Render::GetTextureHeight(path)\treal", "doc": "" },
		{ "sig": "Render::SetFogEnable(bool)\tvoid", "doc": "" },
		{ "sig": "Render::SetFogParam(start, end, r, g, b)\tvoid", "doc": "" },
		{ "sig": "Render::ClearInvalidRenderPriority()\tvoid", "doc": "" },
		{ "sig": "Render::SetInvalidRenderPriorityA1(start, end)\tvoid", "doc": "" },
		{ "sig": "Render::GetReservedRenderTargetName(index)\tvoid", "doc": "" },
		{ "sig": "Render::CreateRenderTarget(target)\tbool", "doc": "" },
		{ "sig": "Render::RenderToTextureA1(target, start, end, clear)\tvoid", "doc": "" },
		{ "sig": "Render::RenderToTextureB1(target, obj, clear)\tvoid", "doc": "" },
		{ "sig": "Render::SaveRenderedTextureA1(target, file)\tvoid", "doc": "" },
		{ "sig": "Render::SaveRenderedTextureA2(target, file, l, t, r, b)\tvoid", "doc": "" },
		{ "sig": "Render::SaveSnapShotA1(file)\tvoid", "doc": "" },
		{ "sig": "Render::SaveSnapShotA2(file, l, t, r, b)\tvoid", "doc": "" },

		//3D Camera functions

		{ "sig": "3DCamera::SetCameraFocusX(x)\tvoid", "doc": "Parameters:\n\t1) x-coordinate\nSets the x coordinate of the camera focus" },
		{ "sig": "3DCamera::SetCameraFocusY(y)\tvoid", "doc": "Parameters:\n\t1) y-coordinate\nSets the y coordinate of the camera focus" },
		{ "sig": "3DCamera::SetCameraFocusZ(z)\tvoid", "doc": "Parameters:\n\t1) z-coordinate\nSets the z coordinate of the camera focus" },
		{ "sig": "3DCamera::SetCameraFocusXYZ(x, y, z)\tvoid", "doc": "Parameters:\n\t1) X-coordinate\n\t2) Y-coordinate\n\t3) Z-coordinate\nSets the X, Y, and Z coordinates of the camera focus" },
		{ "sig": "3DCamera::SetCameraRadius(radius)\tvoid", "doc": "Parameters:\n\t1) distance\nSets the distance of the camera to the focus point." },
		{ "sig": "3DCamera::SetCameraAzimuthAngle(angle)\tvoid", "doc": "Parameters:\n\t1) azumith angle from focus point\nSets the azimuth angle from the focus point." },
		{ "sig": "3DCamera::SetCameraElevationAngle(angle)\tvoid", "doc": "Parameters:\n\t1) elevation angle from focus point\nSets the elevation angle from the focus point." },
		{ "sig": "3DCamera::SetCameraYaw(angle)\tvoid", "doc": "Parameters:\n\t1) yaw angle\nSets the horizontal Yaw angle of the camera." },
		{ "sig": "3DCamera::SetCameraPitch(pitch)\tvoid", "doc": "Parameters:\n\t2) pitch angle\nSets the vertical Pitch angle of the camera." },
		{ "sig": "3DCamera::SetCameraRoll(roll)\tvoid", "doc": "Parameters:\n\t3) roll angle\nSets the rotational Roll angle of the camera." },
		{ "sig": "3DCamera::GetCameraX()\treal", "doc": "Returns the x-coordinate of the camera." },
		{ "sig": "3DCamera::GetCameraY()\treal", "doc": "Returns the y-coordinate of the camera." },
		{ "sig": "3DCamera::GetCameraZ()\treal", "doc": "Returns the z-coordinate of the camera." },
		{ "sig": "3DCamera::GetCameraFocusX()\treal", "doc": "Returns the x-coordinate of the focus point." },
		{ "sig": "3DCamera::GetCameraFocusY()\treal", "doc": "Returns the y-coordinate of the focus point." },
		{ "sig": "3DCamera::GetCameraFocusZ()\treal", "doc": "Returns the z-coordinate of the focus point." },
		{ "sig": "3DCamera::GetCameraRadius()\treal", "doc": "Returns the distance from the focus point to the camera." },
		{ "sig": "3DCamera::GetCameraAzimuthAngle(angle)\treal", "doc": "Returns the azimuth angle from the focus point to the camera." },
		{ "sig": "3DCamera::GetCameraElevationAngle(angle)\treal", "doc": "Returns the elevation angle from the focus point to the camera." },
		{ "sig": "3DCamera::GetCameraYaw()\treal", "doc": "Returns the horizontal Yaw angle of the camera." },
		{ "sig": "3DCamera::GetCameraPitch(pitch)\treal", "doc": "Returns the vertical Pitch angle of the camera." },
		{ "sig": "3DCamera::GetCameraRoll(roll)\treal", "doc": "Returns the rotational Roll angle of the camera." },
		{ "sig": "3DCamera::SetCameraPerspectiveClip(near_clip, far_clip)\tvoid", "doc": "Parameters:\n\t1) near clipping distance\n\t2) far clipping distance\nObjects that are further or nearer than the clipping distance will not be drawn.\nDefault near is 10, default far is 2000." },

		// 2D Camera functions

		{ "sig": "2DCamera::Set2DCameraFocusX(x)\tvoid", "doc": "Parameters:\n\t1) x-coordinate\nSets the x-coordinate of the focus point.\nIt is usually the center of the screen." },
		{ "sig": "2DCamera::Set2DCameraFocusY(y)\tvoid", "doc": "Parameters:\n\t1) y-coordinate\nSets the y-coordinate of the focus point.\nIt is usually the center of the screen." },
		{ "sig": "2DCamera::Set2DCameraAngleZ(angle)\tvoid", "doc": "Parameters:\n\t1) z-rotation\nSets the z-angle of the 2Dcamera" },
		{ "sig": "2DCamera::Set2DCameraRatio(ratio)\tvoid", "doc": "Parameters:\n\t1) zoom\nSets the zoom of the camera, centered on the focus point.\nThis value is usually 1." },
		{ "sig": "2DCamera::Set2DCameraRatioX(ratio)\tvoid", "doc": "Parameters:\n\t1) x-zoom\nSets the magnification of the X-axis of the 2D camera, centered on the focus point.\nThe value is usually 1.\nSetting it to 2 will double the size of the x-axis and setting a negative value will flip the x-axis." },
		{ "sig": "2DCamera::Set2DCameraRatioY(ratio)\tvoid", "doc": "Parameters:\n\t1) y-zoom\nSets the magnification of the Y-axis of the 2D camera, centered on the focus point.\nThe value is usually 1.\nSetting it to 2 will double the size of the y-axis and setting a negative value will flip the y-axis." },
		{ "sig": "2DCamera::Reset2DCamera()\tvoid", "doc": "Resets both the focus point and the zoom ratio, respectively to the center of the screen and 1." },
		{ "sig": "2DCamera::Get2DCameraX()\treal", "doc": "Returns the x-coordinate of the camera." },
		{ "sig": "2DCamera::Get2DCameraY()\treal", "doc": "Returns the y-coordinate of the camera." },
		{ "sig": "2DCamera::Get2DCameraAngleZ()\treal", "doc": "Returns the z rotation angle of the camera." },
		{ "sig": "2DCamera::Get2DCameraRatio()\treal", "doc": "Returns the zoom ratio of the camera." },
		{ "sig": "2DCamera::Get2DCameraRatioX()\treal", "doc": "Returns the x zoom ratio of the camera." },
		{ "sig": "2DCamera::Get2DCameraRatioY()\treal", "doc": "Returns the y zoom ratio of the camera." },

		//Script functions

		{ "sig": "Script::LoadScript(path)\treal", "doc": "Parameters:\n\t1) script path (char)\nLoads and compiles the specified script, and returns its script ID.\nAlso calls @Loading and initializes global variables." },
		{ "sig": "Script::LoadScriptInThread(path)\treal", "doc": "Parameters:\n\t1) script path (char)\nLoads and compiles the specified script in a different thread, and returns its script ID.\nAlso calls @Loading and initializes global variables." },
		{ "sig": "Script::StartScript(id)\tvoid", "doc": "Parameters:\n\t1) script ID (real)\nStarts the specified script (@Initialize is called and @MainLoop begins)." },
		{ "sig": "Script::CloseScript(id)\tvoid", "doc": "Parameters:\n\t1) script ID (real)\nStops the specified script.\nUntil this function is called, the script will continue to run." },
		{ "sig": "Script::IsCloseScript(id)\tbool", "doc": "Parameters:\n\t1) script ID (real)\nReturns whether the specified script has been stopped. Returns true if the script is not running." },
		{ "sig": "Script::SetScriptArgument(id, index, value)\tvoid", "doc": "Parameters:\n\t1) script ID (real)\n\t2) argument index (real)\n\t3) arbitrary value (free)\nBefore starting the given script with StartScript, sets a value that is to be passed to the given script upon starting.\nYou can then get this value in the script with GetScriptArgument. " },
		{ "sig": "Script::GetScriptArgument(index)\tfree", "doc": "Parameters:\n\t1) argument index (real)\nReturns the value of the specified argument, previously set by SetScriptArgument before the script was started." },
		{ "sig": "Script::GetScriptArgumentCount()\treal", "doc": "Returns the number of arguments set by SetScriptArgument before the script was started." },
		{ "sig": "Script::CloseStgScene()\tvoid", "doc": "Ends the current scene (returns to script selection screen). " },
		{ "sig": "Script::GetOwnScriptID()\treal", "doc": "Returns the script's own ID during execution." },
		{ "sig": "Script::GetEventType()\tconstant", "doc": "Returns the event type currently triggered in @Event.\nA list of default events can be found here:\nhttp://dmf.shrinemaiden.org/wiki/How_to_Write_Scripts#Events_.28.40Event.29" },
		{ "sig": "Script::GetEventArgument(index)\tdepend", "doc": "Parameters:\n\t1) argument index (real)\nReturns the argument of the event currently triggered in @Event. Can be an arbitrary value." },
		{ "sig": "Script::SetScriptResult(value)\tvoid", "doc": "Parameters:\n\t1) result sent by the event (free)\nSets the result of the event in @Event, which can then be retrieved by GetScriptResult." },
		{ "sig": "Script::GetScriptResult(id)\tfree", "doc": "Parameters:\n\t1) script id (real)\nReturns the event result from SetScriptResult. Can be an arbitrary value." },
		{ "sig": "Script::SetAutoDeleteObject(delete)\tvoid", "doc": "Parameters:\n\t1) enable (bool)\nSets whether to delete all existing objects that were created in the script at its termination.\nIf set to true, the script's objects will be deleted. The default value is false." },
		{ "sig": "Script::NotifyEvent(id, event_type, value)\tvoid", "doc": "Parameters:\n\t1) script ID (real)\n\t2) event type (real/constant)\n\t3) arbitrary value (free)\nCalls the @Event of the script with the specified ID, triggering the specified event.\nThe event type may use a value greater than EV_USER." },
		{ "sig": "Script::NotifyEventAll(event_type, value)\tvoid", "doc": "Parameters:\n\t1) event type (real/constant)\n\t2) arbitrary value (free)\nCalls the @Event of all scripts, triggering the specified event.\nThe event type may use a value greater than EV_USER." },
		{ "sig": "Script::GetScriptInfoA1(path, info_type)\tdepend", "doc": "Parameters:\n\t1) file path (char)\n\t2) info type (constant)\n\tINFO_SCRIPT_TYPE: Returns the script type (constant):\n\t\tTYPE_SCRIPT_PLAYER: Player script\n\t\tTYPE_SCRIPT_SINGLE: Single script\n\t\tTYPE_SCRIPT_PLURAL: Plural script\n\t\tTYPE_SCRIPT_STAGE: Stage script\n\t\tTYPE_SCRIPT_PACKAGE: Package script\n\tINFO_SCRIPT_PATH: Returns the script path (char).\n\tINFO_SCRIPT_ID: Returns the script #ID (char).\n\tINFO_SCRIPT_TITLE: Returns the script #Title (char).\n\tINFO_SCRIPT_TEXT: Returns the script #Text (char).\n\tINFO_SCRIPT_IMAGE: Returns the script #Image (char).\n\tINFO_SCRIPT_REPLAY_NAME: Returns the script #ReplayName (char)." },

		//System functions

		{ "sig": "System::SetStgFrame(l, t, r, b, min_layer, max_layer)\tvoid", "doc": "Parameters:\n\t1) rectangle left\n\t2) rectangle top\n\t3) rectangle right\n\t4) rectangle bottom\n\t5) minimum render priority\n\t6) maximum render priority\nSets the STG space frame. Default values are (32, 16, 416, 464, 20, 80)." },
		{ "sig": "System::GetScore()\treal", "doc": "Returns the current score." },
		{ "sig": "System::AddScore(value)\tvoid", "doc": "Parameters:\n\t1) value\nAdds the given value to the score." },
		{ "sig": "System::GetGraze()\treal", "doc": "Returns the current amount of graze." },
		{ "sig": "System::AddGraze(value)\tvoid", "doc": "Parameters:\n\t1) value\nAdds the given value to the graze count." },
		{ "sig": "System::GetPoint()\treal", "doc": "Returns the current amount of point items collected (default is the blue point item)." },
		{ "sig": "System::AddPoint(num_items)\tvoid", "doc": "Parameters:\n\t1) value\nAdds the given value to the point count." },
		{ "sig": "System::SetItemRenderPriorityI(layer)\tvoid", "doc": "Parameters:\n\t1) render priority (0-100)\nSets the render priority for items (default is 60)." },
		{ "sig": "System::SetShotRenderPriorityI(layer)\tvoid", "doc": "Parameters:\n\t1) render priority (0-100)\nSets the render priority for bullets (default is 50)." },
		{ "sig": "System::GetStgFrameRenderPriorityMinI()\treal", "doc": "Returns the lowest render priority for the STG frame (0-100) (default is 20)." },
		{ "sig": "System::GetStgFrameRenderPriorityMaxI()\treal", "doc": "Returns the highest render priority for the STG frame (0-100) (default is 80)." },
		{ "sig": "System::GetItemRenderPriorityI()\treal", "doc": "Returns the render priority for items (0-100) (default is 60)." },
		{ "sig": "System::GetShotRenderPriorityI()\treal", "doc": "Returns the render priority for shots (0-100) (default is 50)." },
		{ "sig": "System::GetPlayerRenderPriorityI()\treal", "doc": "Returns the render priority for the player (0-100) (default is 30)." },
		{ "sig": "System::GetCameraFocusPermitPriorityI()\treal", "doc": "Returns the highest render priority the 2D camera can affect (0-100) (default is 79)" },
		{ "sig": "System::GetStgFrameLeft()\treal", "doc": "Returns the leftmost value of the STG frame." },
		{ "sig": "System::GetStgFrameTop()\treal", "doc": "Returns the topmost value of the STG frame." },
		{ "sig": "System::GetStgFrameWidth()\treal", "doc": "Returns the width of the STG frame." },
		{ "sig": "System::GetStgFrameHeight()\treal", "doc": "Returns the height of the STG frame." },
		{ "sig": "System::GetScreenWidth()\treal", "doc": "Returns the width of Danmakufu's drawing space." },
		{ "sig": "System::GetScreenHeight()\treal", "doc": "Returns the Height of Danmakufu's drawing space." },
		{ "sig": "System::IsReplay()\tbool", "doc": "Returns true if a replay is playing, false otherwise." },
		{ "sig": "System::AddArchiveFile(path)\tbool", "doc": "Parameters:\n\t1) archive file path\nAdds the path to use when reading images or sounds from an archive file.\nReturns true if the archive was successfully read, false otherwise." },

		//Player functions

		{ "sig": "Player::GetPlayerObjectID()\tobj", "doc": "Returns player object ID." },
		{ "sig": "Player::GetPlayerScriptID()\treal", "doc": "Returns the player's script ID.\nThis function returns the same value as GetOwnScriptID when used inside the player script." },
		{ "sig": "Player::SetPlayerSpeed(normal_speed, focus_speed)\tvoid", "doc": "Parameters:\n\t1) normal speed (real)\n\t2) focus speed (real)\nSets the normal speed and focus speed of the player." },
		{ "sig": "Player::SetPlayerClip(l, t, r, b)\tvoid", "doc": "Parameters:\n\t1) left bound\n\t2) top bound\n\t3) right bound\n\t4) botton bound\nSets the area within which the player can move." },
		{ "sig": "Player::SetPlayerLife(value)\tvoid", "doc": "Parameters:\n\t1) value\nSets value as life points for the player (can be non integer)." },
		{ "sig": "Player::SetPlayerSpell(value)\tvoid", "doc": "Parameters:\n\t1) value\nSets the amount of bombs available for the player (can be non integer)." },
		{ "sig": "Player::SetPlayerPower(value)\tvoid", "doc": "Parameters:\n\t1) value\nSets the amount of power points (can be non integer)." },
		{ "sig": "Player::SetPlayerInvincibilityFrame(num_frames)\tvoid", "doc": "Parameters:\n\t1) number frames\nSets the amount of frames for player invincibility." },
		{ "sig": "Player::SetPlayerDownStateFrame(num_frames)\tvoid", "doc": "Parameters:\n\t1) number frames\nSets the amount of frames that will wait before respawning the player." },
		{ "sig": "Player::SetPlayerRebirthFrame(num_frames)\tvoid", "doc": "Parameters:\n\t1) number frames\nSets the amount of frames the player can counter bomb.\nDefault is 15." },
		{ "sig": "Player::SetPlayerRebirthLossFrame(lost_frames)\tvoid", "doc": "Parameters:\n\t1) number frames\nSets the amount of counter bomb frames the player loses per counter bomb.\nDefault value is 3." },
		{ "sig": "Player::SetPlayerAutoItemCollectLine(y)\tvoid", "doc": "Parameters:\n\t1) y-coordinate\nSets the y-coordinate of the auto collect line.\nA negative value removes the line.\nDefault is no line." },
		{ "sig": "Player::SetForbidPlayerShot(forbid)\tvoid", "doc": "Parameters:\n\t1) boolean\nWhen set to true, the player cannot use normal shots." },
		{ "sig": "Player::SetForbidPlayerSpell(forbid)\tvoid", "doc": "Parameters:\n\t1) boolean\nWhen set to true, the player cannot use bombs." },
		{ "sig": "Player::GetPlayerX()\treal", "doc": "Returns the x-coordinate of the player." },
		{ "sig": "Player::GetPlayerY()\treal", "doc": "Returns the y-coordinate of the player." },
		{ "sig": "Player::GetPlayerState()\tconstant", "doc": "Returns the player state:\n\tSTATE_NORMAL: the player is alive.\n\tSTATE_HIT: the player has been hit.\n\tSTATE_DOWN: after being killed, before reappearing.\n\tSTATE_END: the amount of remaining lives has become 0 (game over)." },
		{ "sig": "Player::GetPlayerLife()\treal", "doc": "Returns the number of player lives remaining." },
		{ "sig": "Player::GetPlayerSpell()\treal", "doc": "Returns the number of player bombs remaining." },
		{ "sig": "Player::GetPlayerPower()\treal", "doc": "Returns the player's power." },
		{ "sig": "Player::GetPlayerInvincibilityFrame()\treal", "doc": "Returns the amount of frames the player is invincible." },
		{ "sig": "Player::GetPlayerDownStateFrame()\treal", "doc": "Returns the amount of frames that the player will spend in the downed state." },
		{ "sig": "Player::GetPlayerRebirthFrame()\treal", "doc": "Returns the amount of frames the player can counter bomb." },
		{ "sig": "Player::GetAngleToPlayer(obj)\treal", "doc": "Parameters:\n\t1) object ID\nReturns the angle from the object with specified ID to the player." },
		{ "sig": "Player::IsPermitPlayerShot()\tbool", "doc": "Returns true if the player can use normal shots." },
		{ "sig": "Player::IsPermitPlayerSpell()\tbool", "doc": "Returns true if the player can use bombs.\nThe returned value may differ from a previously set SetForbidPlayerSpell. For instance, it is forced to false during a LastSpell." },
		{ "sig": "Player::IsPlayerLastSpellWait()\tbool", "doc": "Returns true if the player is counter bombing." },
		{ "sig": "Player::IsPlayerSpellActive()\tbool", "doc": "Returns true if the player is currently using a bomb (not only the button press)." },
		{ "sig": "Player::GetPlayerID()\tchar", "doc": "Returns the system ID of the player script.\nThis value is defined inside the player script in the #ID header." },
		{ "sig": "Player::GetPlayerReplayName()\tchar", "doc": "Returns the replay ID of the player.\nThis value is defined inside the player script in the #ReplayName header." },


		//Enemy functions

		{ "sig": "Enemy::GetEnemyBossSceneObjectID()\tobj", "doc": "" },
		{ "sig": "Enemy::GetEnemyBossObjectID()\tobj[]", "doc": "" },
		{ "sig": "Enemy::GetAllEnemyID()\tobj[]", "doc": "" },
		{ "sig": "Enemy::GetIntersectionRegistedEnemyID()\tobj[]", "doc": "" },
		{ "sig": "Enemy::GetAllEnemyIntersectionPosition()\treal[][]", "doc": "" },
		{ "sig": "Enemy::GetEnemyIntersectionPosition(x, y, max_num)\treal[][]", "doc": "" },
		{ "sig": "Enemy::GetEnemyIntersectionPositionByIdA1(obj)\treal[][]", "doc": "" },
		{ "sig": "Enemy::GetEnemyIntersectionPositionByIdA2(obj, x, y)\treal[][]", "doc": "" },
		{ "sig": "Enemy::LoadEnemyShotData(path)\tvoid", "doc": "" },
		{ "sig": "Enemy::ReloadEnemyShotData(path)\tvoid", "doc": "" },

		//Shot functions

		{ "sig": "Shot::DeleteShotAll(bullet_type, delete_type)\tvoid", "doc": "Parameters:\n\t1) Type (TYPE_ALL, TYPE_SHOT, TYPE_CHILD)\n\t2) Delete Type (TYPE_IMMEDIATE, TYPE_FADE, TYPE_ITEM)\nDeletes all bullets. ALL will clear all bullets and lasers, SHOT will clear only bullets, and CHILD will clear bullets and lasers fired from the currently running script (e.g. a stage script that spawns enemies, putting CHILD in one of the enemy's script will clear only that enemy's bullets).\nThe second type determines how the bullet will be deleted. IMMEDIATE will immediately delete the bullets, FADE will slowly fade the bullets (note, they will still be visible while fading out, but they will not have any collision), and ITEM will turn the bullets into points that will immediately be collected to the player." },
		{ "sig": "Shot::DeleteShotInCircle(bullet_type, delete_type, x, y, r)\tvoid", "doc": "Parameters:\n\t1) Type\n\t2) Delete Type\n\t3) X coordinate\n\t4) Y coordinate\n\t5) Radius\nSame as DeleteShotAll, except it will only clear bullets in a defined circle.\nSee documentation for DeleteShotAll for more information." },
		{ "sig": "Shot::CreateShotA1(x, y, s, a, g, d)\tobj", "doc": "Parameters:\n\t1) X coordinate\n\t2) Y coordinate\n\t3) speed\n\t4) angle\n\t5) graphic\n\t6) delay\nCreates a basic bullet that will move in the angle and speed defined.\nGraphic is the image the bullet will have, while delay is the time in frames that the bullet will appear. During it's delay, there will be a cloud that appears where the bullet will spawn.\nReturns the object ID." },
		{ "sig": "Shot::CreateShotA2(x, y, s, a, acc, max_s, g, d)\tobj", "doc": "Parameters:\n\t1) X coordinate\n\t2) Y coordinate\n\t3) speed\n\t4) angle\n\t5) acceleration\n\t6)max speed\n\t7) graphic\n\t8) delay\nSame as CreateShotA1, except you can define an acceleration and max speed for the bullet. The number defined for acceleration will be applied to the bullet per frame, so this will usually have low numbers such as 0.1.\nNegative values may be used, however, having a negative value on acceleration but a positive number on max speed (or vice versa) will result in the bullet spawning at max speed." },
		{ "sig": "Shot::CreateShotOA1(obj, speed, angle, g, d)\tobj", "doc": "Parameters:\n\t1) object ID (real)\n\t2) speed\n\t3) angle\n\t4) graphic\n\t5) delay\nCreates a bullet that will spawn on the coordinates of the given object id.\nThe bullet and itsParameters act the same as CreateShotA1." },
		{ "sig": "Shot::CreateShotB1(x, y, x_spd, y_spd, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::CreateShotB2(x, y, x_spd, y_spd, x_acc, y_acc, x_max, y_max, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::CreateShotOB1(obj, x, y, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::CreateLooseLaserA1(x, y, s, a, l, w, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::CreateStraightLaserA1(x, y, a, l, w, f, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::CreateCurveLaserA1(x, y, s, a, l, w, g, d)\tobj", "doc": "" },
		{ "sig": "Shot::SetShotIntersectionCircle(x, y, r)\tvoid", "doc": "" },
		{ "sig": "Shot::SetShotIntersectionLine(start_x, start_y, end_x, end_y, r)\tvoid", "doc": "" },
		{ "sig": "Shot::GetShotIdInCircleA1(x, y, r)\tobj[]", "doc": "" },
		{ "sig": "Shot::GetShotIdInCircleA2(x, y, r, target_type)\tobj[]", "doc": "" },
		{ "sig": "Shot::GetShotCount(target_type)\treal", "doc": "" },
		{ "sig": "Shot::SetShotAutoDeleteClip(l, t, r, b)\tvoid", "doc": "" },
		{ "sig": "Shot::GetShotDataInfoA1(graphic, target_type, info_type)\tdepend", "doc": "" },

		//Item functions

		{ "sig": "Item::CreateItemA1(item_type, x, y, score)\tobj", "doc": "" },
		{ "sig": "Item::CreateItemA2(item_type, x, y, x_dest, y_dest, score)\tobj", "doc": "" },
		{ "sig": "Item::CreateItemU1(id, x, y, score)\tobj", "doc": "" },
		{ "sig": "Item::CreateItemU2(id, x, y, x_dest, y_dest, score)\tobj", "doc": "" },
		{ "sig": "Item::CollectAllItems()\tvoid", "doc": "" },
		{ "sig": "Item::CollectItemsByType(item_type)\tvoid", "doc": "" },
		{ "sig": "Item::CollectItemsInCircle(x, y, r)\tvoid", "doc": "" },
		{ "sig": "Item::CancelCollectItems()\tvoid", "doc": "" },
		{ "sig": "Item::StartItemScript(path)\tvoid", "doc": "" },
		{ "sig": "Item::LoadItemData(path)\tvoid", "doc": "" },
		{ "sig": "Item::ReloadItemData(path)\tvoid", "doc": "" },
		{ "sig": "Item::SetDefaultBonusItemEnable(use)\tvoid", "doc": "" },

		//Other functions

		{ "sig": "Other::StartSlow(obj, fps)\tvoid", "doc": "" },
		{ "sig": "Other::StopSlow(obj)\tvoid", "doc": "" },
		{ "sig": "Other::IsIntersected_Line_Circle(start_x, start_y, end_x, end_y, w, x, y, r)\tbool", "doc": "" },
		{ "sig": "Other::IsIntersected_Obj_Obj(obj1, obj2)\tbool", "doc": "" },
		{ "sig": "Other::GetObjectDistance(obj1, obj2)\tvoid", "doc": "" },
		{ "sig": "Other::GetObject2dPosition(obj)\treal[]", "doc": "" },
		{ "sig": "Other::Get2dPosition(x, y, z)\treal[]", "doc": "" },

		// Generic Object functions

		{ "sig": "Obj_Delete(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nDeletes specified object." },
		{ "sig": "Obj_IsDeleted(obj)\tbool", "doc": "Parameters:\n\t1) object ID (real)\nReturns true if the specified object has been deleted." },
		{ "sig": "Obj_SetVisible(obj, visible)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) visible (bool)\nSets visibility of specified object.\nIf visible is set to false, the object will not be drawn." },
		{ "sig": "Obj_IsVisible(obj)\tbool", "doc": "Parameters:\n\t1) object ID (real)\nReturns true if the specified object is visible." },
		{ "sig": "Obj_SetRenderPriority(obj, priority_ratio)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) render priority (0.0-1.0)\nSets the object's render priority as a ratio (0.0-1.0)." },
		{ "sig": "Obj_SetRenderPriorityI(obj, priority)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) render priority (0-100)\nSets the object's render priority in the range 0-100 (integer)." },
		{ "sig": "Obj_GetRenderPriority(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the object's render priority as a ratio (0.0-1.0)." },
		{ "sig": "Obj_GetRenderPriorityI(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the object's render priority as an integer (0-100)." },
		{ "sig": "Obj_GetValue(obj, key)\tfree", "doc": "Parameters:\n\t1) object ID (real)\n\t2) key (char)\nReturns the value associated with the given key for the given object, previously set by Obj_SetValue().\nWarning: If the key-value pair does not exist or was deleted, attempting to access it will crash the program." },
		{ "sig": "Obj_GetValueD(obj, key, default)\tfree", "doc": "Parameters:\n\t1) object ID (real)\n\t2) key (char)\n\t3) default value (arbitrary type)\nReturns the value associated with the given key for the given object, previously set by Obj_SetValue().\nIf the key-value pair doesn't exist, the default value is returned instead." },
		{ "sig": "Obj_SetValue(obj, key, value)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) key (char)\n\t3) value (arbitrary type)\nFor the given object, maps the given key to the given value.\nThe value can be returned by using Obj_GetValue() with the corresponding key." },
		{ "sig": "Obj_DeleteValue(obj, key)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) key (char)\nDeletes the key-value pair previously set by Obj_SetValue()." },
		{ "sig": "Obj_IsValueExists(obj, key)\tbool", "doc": "Parameters:\n\t1) object ID (real)\n\t2) key (char)\nChecks whether the object has a key-value pair for the given key and returns true if it does." },
		{ "sig": "Obj_GetType(obj)\tconstant", "doc": "Parameters:\n\t1) object ID (real)\nReturns the type of object." },

		// Render Object functions

		{ "sig": "ObjRender_SetX(obj, x)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) x-coordinate (real)\nSets the x-coordinate of the object." },
		{ "sig": "ObjRender_SetY(obj, y)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) y-coordinate (real)\nSets the y-coordinate of the object." },
		{ "sig": "ObjRender_SetZ(obj, z)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) z-coordinate (real)\nSets the z-coordinate of the object." },
		{ "sig": "ObjRender_SetPosition(obj, x, y, z)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) x-coordinate (real)\n\t3) y-coordinate (real)\n\t4) z-coordinate (real)\nSets the x, y and z-coordinate of the object." },
		{ "sig": "ObjRender_SetAngleX(obj, x_angle)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) x-angle (real)\nSets the x-angle of the object." },
		{ "sig": "ObjRender_SetAngleY(obj, y_angle)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) y-angle (real)\nSets the y-angle of the object." },
		{ "sig": "ObjRender_SetAngleZ(obj, z_angle)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) z-angle (real)\nSets the z-angle of the object." },
		{ "sig": "ObjRender_SetAngleXYZ(obj, x, y, z)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) x-angle (real)\n\t3) y-angle (real)\n\t4) z-angle (real)\nSets the x, y and z-angle of the object." },
		{ "sig": "ObjRender_SetScaleX(obj, x_scale)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) x-scale (real)\nSets the x-scale of the object." },
		{ "sig": "ObjRender_SetScaleY(obj, y_scale)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) y-scale (real)\nSets the y-scale of the object." },
		{ "sig": "ObjRender_SetScaleZ(obj, z_scale)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) z-scale (real)\nSets the z-scale of the object." },
		{ "sig": "ObjRender_SetScaleXYZ(obj, x, y, z)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) x-scale (real)\n\t3) y-scale (real)\n\t4) z-scale (real)\nSets the x, y and z-scale of the object." },
		{ "sig": "ObjRender_SetColor(obj, r, g, b)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) R (real)\n\t3) G (real)\n\t4) B (real)\nSets the color of the object using RGB (0-255)." },
		{ "sig": "ObjRender_SetColorHSV(obj, h, s, v)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) Hue (real)\n\t3) Saturation (real)\n\t4) Value (real)\nSets the Hue (0-359), Saturation (0-255), and Value (0-255) of an object." },
		{ "sig": "ObjRender_SetAlpha(obj, alpha)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) alpha (real)\nSets the alpha value of the object. A value of 0 will make the object invisible. A value of 255 will give the object full opacity. Alpha blend type must be used for this to work." },
		{ "sig": "ObjRender_SetBlendType(obj, blend_type)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) blend type (real)\nSets the blend type for the specified object. Available blend types are:\n\tBLEND_ALPHA\n\tBLEND_ADD_RGB\n\tBLEND_MULTIPLY\n\tBLEND_SUBTRACT\n\tBLEND_ADD_ARGB\n\tBLEND_INV_DESTRGB" },
		{ "sig": "ObjRender_GetX(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the x-coordinate of the object." },
		{ "sig": "ObjRender_GetY(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the y-coordinate of the object." },
		{ "sig": "ObjRender_GetZ(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the z-coordinate of the object." },
		{ "sig": "ObjRender_GetAngleX(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the x-angle of the object." },
		{ "sig": "ObjRender_GetAngleY(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the y-angle of the object." },
		{ "sig": "ObjRender_GetAngleZ(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the z-angle of the object." },
		{ "sig": "ObjRender_GetScaleX(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the x-scale of the object." },
		{ "sig": "ObjRender_GetScaleY(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the y-scale of the object." },
		{ "sig": "ObjRender_GetScaleZ(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the z-scale of the object." },
		{ "sig": "ObjRender_GetBlendType(obj)\tconstant", "doc": "Parameters:\n\t1) object ID (real)\nReturns the blend type for the specified object. Available blend types are:\n\tBLEND_ALPHA\n\tBLEND_ADD_RGB\n\tBLEND_MULTIPLY\n\tBLEND_SUBTRACT\n\tBLEND_ADD_ARGB\n\tBLEND_INV_DESTRGB" },
		{ "sig": "ObjRender_SetZWrite(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) bool\nAllows or prevents the object from writing in the Z-buffer." },
		{ "sig": "ObjRender_SetZTest(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) bool\nSets whether or not the object uses the Z-buffer." },
		{ "sig": "ObjRender_SetFogEnable(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) bool\nAllows or prevents the object from being affected by the fog. Defaults to true." },
		{ "sig": "ObjRender_SetPermitCamera(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) bool\nAllows or prevents the camera from seeing anything past the object." },

		// Primitive Object functions

		{ "sig": "ObjPrim_Create(obj_type)\tobj", "doc": "Parameters:\n\t1) object type (constant)\nCreates a Primitive object and returns its ID. Object types are:\n\tOBJ_PRIMITIVE_2D: primitive (triangles) in the 2D space\n\tOBJ_SPRITE_2D: rectangle in the 2D space (usable by the ObjSprite2D_ functions)\n\tOBJ_SPRITE_LIST_2D: list of rectangles in the 2D space (usable by the ObjSpriteList2D_ functions)\n\tOBJ_PRIMITIVE_3D: primitive (triangles) in the 3D space\n\tOBJ_SPRITE_3D: rectangle in the 3D space (usable by the ObjSprite3D_ functions)." },
		{ "sig": "ObjPrim_SetPrimitiveType(prim_type)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) primitive type (real)\nSets the vertex layout for the object among the following:\n\tPRIMITIVE_TRIANGLELIST\n\tPRIMITIVE_TRIANGLESTRIP\n\tPRIMITIVE_TRIANGLEFAN" },
		{ "sig": "ObjPrim_SetVertexCount(obj, vertices)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) number of vertices (real)\nSets the number of vertices the object contains." },
		{ "sig": "ObjPrim_GetVertexCount(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the number of vertices the object contains." },
		{ "sig": "ObjPrim_SetTexture(obj, path)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) path of the texture file (char)\nSets the specified texture on the object. Loads the texture file if it has not already been loaded." },
		{ "sig": "ObjPrim_SetVertexPosition(obj, i, x, y, z)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) vertex index (real)\n\t3) x-coordinate (real)\n\t4) y-coordinate (real)\n\t5) z-coordinate (real)\nSets the position of the specified vertex." },
		{ "sig": "ObjPrim_GetVertexPosition(obj, i)\treal[]", "doc": "Parameters:\n\t1) object ID (real)\n\t2) vertex index (real)\nReturns the position of the specified vertex in an array [x,y,z]." },
		{ "sig": "ObjPrim_SetVertexUV(obj, i, x_frac, y_frac)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) vertex index (real)\n\t3) texture x-coordinate (real)\n\t4) texture y-coordinate (real)\nSets the UV-coordinates for the specified vertex. The value for the coordinates must be in the range (0.0-1.0).\nFor instance, if you want a vertex to be at the center-top of a 512*512 texture, you have to set x to 0.5 and y to 1.0.\nAs it may be troublesome to convert pixels into a 0.0-1.0 value, ObjPrim_SetVertexUVT is recommended." },
		{ "sig": "ObjPrim_SetVertexUVT(obj, i, x, y)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) vertex index (real)\n\t3) texture x-coordinate (real)\n\t4) texture y-coordinate (real)\nSets the UV-coordinates for the specified vertex. You must set the object's texture using ObjPrim_SetTexture beforehand." },
		{ "sig": "ObjPrim_SetVertexColor(obj, i, r, g, b)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) vertex index (real)\n\t3) R (real)\n\t4) G (real)\n\t5) B (real)\nSets the color of the specified vertex (0-255)." },
		{ "sig": "ObjPrim_SetVertexAlpha(obj, i, alpha)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) vertex index (real)\n\t3) alpha value (real)\nSets the alpha value of the specified vertex (0-255)." },

		// 2D Sprite Object functions

		{ "sig": "ObjSprite2D_SetSourceRect(obj, l, t, r, b)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) texture coordinate (left) (real)\n\t3) texture coordinate (top) (real)\n\t4) texture coordinate (right) (real)\n\t5) texture coordinate (bottom) (real)\nSets the texture rectangle for the sprite. This is the rectangle on the original texture from which the sprite will be drawn." },
		{ "sig": "ObjSprite2D_SetDestRect(obj, l, t, r, b)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) left (real)\n\t3) top (real)\n\t4) right (real)\n\t5) bottom (real)\nSets the drawing rectangle for the sprite. This is the rectangle where the sprite will be drawn." },
		{ "sig": "ObjSprite2D_SetDestCenter(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nSets the drawing rectangle for the sprite by mapping the center of the source rectangle to (0, 0).\nFor instance, if the rectangle set with ObjSprite2D_SetSourceRect is (24, 32, 48, 46) (which is 24 wide and 14 high), the destination rectangle becomes (-12, -7, 12, 7)." },

		// 2D Sprite List Object functions

		{ "sig": "ObjSpriteList2D_SetSourceRect(obj, l, t, r, b)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) texture coordinate (left) (real)\n\t3) texture coordinate (top) (real)\n\t4) texture coordinate (right) (real)\n\t5) texture coordinate (bottom) (real)\nSets the texture rectangle for the sprite. This is the rectangle on the original texture from which the sprite will be drawn." },
		{ "sig": "ObjSpriteList2D_SetDestRect(obj, l, t, r, b)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) left (real)\n\t3) top (real)\n\t4) right (real)\n\t5) bottom (real)\nSets the drawing rectangle for the sprite. This is the rectangle where the sprite will be drawn." },
		{ "sig": "ObjSpriteList2D_SetDestCenter(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nSets the drawing rectangle for the sprite by mapping the center of the source rectangle to (0, 0).\nFor instance, if the rectangle set with ObjSpriteList2D_SetSourceRect is (24, 32, 48, 46) (which is 24 wide and 14 high), the destination rectangle becomes (-12, -7, 12, 7)." },
		{ "sig": "ObjSpriteList2D_AddVertex(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nAdds a vertex to the specified object.\n(The number of rectangles drawn is increased by 1.)" },
		{ "sig": "ObjSpriteList2D_CloseVertex(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nAdds the last vertex to the object. Transforming the object with ObjRender_ will affect all rectangles after using this function." },
		{ "sig": "ObjSpriteList2D_ClearVertexCount(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nClears the vertex count for the specified object." },

		// 3D Sprite Object functions

		{ "sig": "ObjSprite3D_SetSourceRect(obj, l, t, r, b)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) texture coordinate (left) (real)\n\t3) texture coordinate (top) (real)\n\t4) texture coordinate (right) (real)\n\t5) texture coordinate (bottom) (real)\nSets the texture rectangle for the sprite. This is the rectangle on the original texture from which the sprite will be drawn." },
		{ "sig": "ObjSprite3D_SetDestRect(obj, l, t, r, b)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) left (real)\n\t3) top (real)\n\t4) right (real)\n\t5) bottom (real)\nSets the drawing rectangle for the sprite. This is the rectangle where the sprite will be drawn." },
		{ "sig": "ObjSprite3D_SetSourceDestRect(obj, l, t, r, b)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) left (real)\n\t3) top (real)\n\t4) right (real)\n\t5) bottom (real)\nSets the texture rectangle for the sprite, and maps the center of the rectangle to the destination coordinates (0, 0)." },
		{ "sig": "ObjSprite3D_SetBillboard(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) billboard (bool)\nIf set to true, the object will always be facing the camera." },

		// 3D Mesh Object functions

		{ "sig": "ObjMesh_Create()\tobj", "doc": "Creates a 3D Mesh object and returns its ID." },
		{ "sig": "ObjMesh_Load(obj, path)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) path of the 3D object file (char)\nLoads a 3D mesh file. The file must be either .mqo (Metasequoia) or .elem (Elfreina) (both are Japanese softwares)." },
		{ "sig": "ObjMesh_SetColor(obj, r, g, b)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) R (real)\n\t3) G (real)\n\t4) B (real)\nSets the color of the mesh (0-255)." },
		{ "sig": "ObjMesh_SetAlpha(obj, alpha)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) alpha value (real)\nSets the alpha value of the mesh (0-255)." },
		{ "sig": "ObjMesh_SetAnimation(obj, name, frame)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) animation name (char)\n\t3) animation frame (real)\nSets the animation of the mesh object. The animation frame of the specified animation name is drawn." },
		{ "sig": "ObjMesh_SetCoordinate2D(obj, allow)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) 2D coordinates (bool)\nWhen set to true, allows the mesh to be positioned using 2D coordinates." },

		// Text Object functions

		{ "sig": "ObjText_Create()\tobj", "doc": "Creates a Text object and returns its ID." },
		{ "sig": "ObjText_SetText(obj, str)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) string (char)\nGives the text object some text to display." },
		{ "sig": "ObjText_SetFontType(obj, font_name)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) font name (char)\nSets the specified font to the text object." },
		{ "sig": "ObjText_SetFontSize(obj, size)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) size (real)\nSets the size of the font for the text object." },
		{ "sig": "ObjText_SetFontBold(obj, bold)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) bold (bool)\nIf set to true, the text will be displayed in bold characters." },
		{ "sig": "ObjText_SetFontColorTop(obj, r, g, b)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) R (real)\n\t3) G (real)\n\t4) B (real)\nSets the top color of the text (0-255)." },
		{ "sig": "ObjText_SetFontColorBottom(obj, r, g, b)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) R (real)\n\t3) G (real)\n\t4) B (real)\nSets the bottom color of the text (0-255)." },
		{ "sig": "ObjText_SetFontBorderWidth(obj, width)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) border width (real)\nSets the width of the font border." },
		{ "sig": "ObjText_SetFontBorderType(obj, border_type)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) border type (real)\nSets the type of the font border among the following:\n\n\tBORDER_NONE: no border\n\n\tBORDER_FULL: full border\n\n\tBORDER_SHADOW: shadow at the bottom right of the text" },
		{ "sig": "ObjText_SetFontBorderColor(obj, r, g, b)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) R (real)\n\t3) G (real)\n\t4) B (real)\nSets the color of the border (0-255)." },
		{ "sig": "ObjText_SetMaxWidth(obj, width)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) width (real)\nSets the maximum width of the text object.\nThe text will automatically create a new line whenever needed." },
		{ "sig": "ObjText_SetMaxHeight(obj, height)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) height (real)\nSets the maximum height of the text object.\nAny part of the text exceeding this height will not be drawn." },
		{ "sig": "ObjText_SetLinePitch(obj, pitch)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) pitch (real)\nSets the line pitch (space between lines) of the text object." },
		{ "sig": "ObjText_SetSidePitch(obj, pitch)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) pitch (real)\nSets the side pitch (space between characters) of the text object." },
		{ "sig": "ObjText_SetTransCenter(obj, x, y)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) x center coordinate (real)\n\t3) y center coordinate (real)\nSets the given coordinates of the text object as its transformation center (rotation, zoom...)." },
		{ "sig": "ObjText_SetAutoTransCenter(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) bool\nWhen true, sets the center of the text object as its transformation center (rotation, zoom...).\nDefault is true." },
		{ "sig": "ObjText_SetHorizontalAlignment(obj, align_type)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) alignment (real)\nSets the alignment of the text. You can choose among:\n\n\tALIGNMENT_LEFT\n\n\tALIGNMENT_CENTER\n\n\tALIGNMENT_RIGHT\nTo use center or right aligned text, you have to set the maximum width using ObjText_SetMaxWidth (in order to know where the right border is)." },
		{ "sig": "ObjText_SetSyntacticAnalysis(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) bool\nAllows or prevents checking for the existence of bracket tags (such as newlines or ruby text) within the text for this object." },
		{ "sig": "ObjText_GetTextLength(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the length of the specified text object.\nWhen using Japanese characters, a half-width character counts as 1 and a full-width character counts as 2 characters." },
		{ "sig": "ObjText_GetTextLengthCU(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the length of the specified text object. Newlines and ruby text are not counted.\nWhen using Japanese characters, both half-width and full-width characters count as 1 character." },
		{ "sig": "ObjText_GetTextLengthCUL(obj)\treal[]", "doc": "Parameters:\n\t1) object ID (real)\nReturns an array of the lengths of each line of the specified text object. Newlines and ruby text are not counted.\nWhen using Japanese characters, both half-width and full-width characters count as 1 character." },
		{ "sig": "ObjText_GetTotalWidth(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the overall width of all lines of the text object." },
		{ "sig": "ObjText_GetTotalHeight(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the combined height of all lines of the text object." },

		// Sound Object functions

		{ "sig": "ObjSound_Create()\tobj", "doc": "Creates a sound object and returns its ID." },
		{ "sig": "ObjSound_Load(obj, path)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) path\nLoads the specified sound file." },
		{ "sig": "ObjSound_Play(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nPlays the sound file associated to the object." },
		{ "sig": "ObjSound_Stop(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nStops the sound file associated to the object." },
		{ "sig": "ObjSound_SetVolumeRate(obj, volume)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) volume (real)\nSets the volume of the sound object (0-100)." },
		{ "sig": "ObjSound_SetPanRate(obj, pan)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n]t2) volume (real)\nSets the pan volume of the sound object (-100-100).\n0 is neutral, -100 is left-side only, 100 is right-side only." },
		{ "sig": "ObjSound_SetFade(obj, fade_rate)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) fade (real)\nSets the fade time of the sound object." },
		{ "sig": "ObjSound_SetLoopEnable(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) loop (boolean)\nWhen set to true, the sound will loop." },
		{ "sig": "ObjSound_SetLoopTime(obj, start, end)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) loop start (real)\n\t3) loop end (real)\nSets the timing of the loop, in seconds." },
		{ "sig": "ObjSound_SetLoopSampleCount(obj, start, end)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) loop sample start (real)\n\t3) loop sample end (real)\nSets the timing of the loop based on the sample count." },
		{ "sig": "ObjSound_SetRestartEnable(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) restart (boolean)\nWhen set to true, allows the sound object to be restarted rather than continuing from where it left off." },
		{ "sig": "ObjSound_SetSoundDivision(obj, sound_type)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) sound division (SOUND_BGM, SOUND_SE)\nSpecifies whether a sound is a BGM or a sound effect:" },
		{ "sig": "ObjSound_IsPlaying(obj)\tbool", "doc": "Parameters:\n\t1) object ID (real)\nReturns true if the sound file is playing." },
		{ "sig": "ObjSound_GetVolumeRate(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the volume (0-100) of the sound file." },

		// File Object functions

		{ "sig": "ObjFile_Create(obj_type)\tobj", "doc": "" },
		{ "sig": "ObjFile_Open(obj, path)\tbool", "doc": "" },
		{ "sig": "ObjFile_OpenNW(obj, path)\tbool", "doc": "" },
		{ "sig": "ObjFile_Store(obj)\tbool", "doc": "" },
		{ "sig": "ObjFile_GetSize(obj)\treal", "doc": "" },

		// Text File Object functions

		{ "sig": "ObjFileT_GetLineCount(obj)\treal", "doc": "" },
		{ "sig": "ObjFileT_GetLineText(obj, line_num)\tchar", "doc": "" },
		{ "sig": "ObjFileT_AddLine(obj, str)\tvoid", "doc": "" },
		{ "sig": "ObjFileT_ClearLine(obj)\tvoid", "doc": "" },
		{ "sig": "ObjFileT_SplitLineText(obj, line_num, delimiter)\tchar[]", "doc": "" },

		// Binary File Object functions

		{ "sig": "ObjFileB_SetByteOrder(obj, endian_type)\tvoid", "doc": "" },
		{ "sig": "ObjFileB_SetCharacterCode(obj, encode_type)\tvoid", "doc": "" },
		{ "sig": "ObjFileB_GetPointer(obj)\treal", "doc": "" },
		{ "sig": "ObjFileB_Seek(obj, pointer)\tvoid", "doc": "" },
		{ "sig": "ObjFileB_ReadBoolean(obj)\tbool", "doc": "" },
		{ "sig": "ObjFileB_ReadByte(obj)\treal", "doc": "" },
		{ "sig": "ObjFileB_ReadShort(obj)\treal", "doc": "" },
		{ "sig": "ObjFileB_ReadInteger(obj)\treal", "doc": "" },
		{ "sig": "ObjFileB_ReadLong(obj)\treal", "doc": "" },
		{ "sig": "ObjFileB_ReadFloat(obj)\treal", "doc": "" },
		{ "sig": "ObjFileB_ReadDouble(obj)\treal", "doc": "" },
		{ "sig": "ObjFileB_ReadString(obj, size)\tchar", "doc": "" },

		// Move Object functions

		{ "sig": "ObjMove_SetX(obj, x)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) x-coordinate (real)\nSets the x-coordinate of the specified object." },
		{ "sig": "ObjMove_SetY(obj, y)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) y-coordinate (real)\nSets the y-coordinate of the specified object." },
		{ "sig": "ObjMove_SetPosition(obj, x, y)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) x-coordinate (real)\n\t3) y-coordinate (real)\nSets the x and y of the specified object." },
		{ "sig": "ObjMove_SetSpeed(obj, speed)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) speed (real)\nSets the movement speed per frame for the object." },
		{ "sig": "ObjMove_SetAngle(obj, angle)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) angle (real)\nSets the movement angle for the object." },
		{ "sig": "ObjMove_SetAcceleration(obj, accel)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) acceleration (real)\nSets the movement acceleration per frame for the object." },
		{ "sig": "ObjMove_SetMaxSpeed(obj, max)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) speed (real)\nSets the maximum/minimum speed which the object will reach by acceleration." },
		{ "sig": "ObjMove_SetAngularVelocity(obj, ang_vel)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) angular velocity (real)\nSets the change in movement angle per frame for the object." },
		{ "sig": "ObjMove_SetDestAtSpeed(obj, x, y, speed)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) x-coordinate (real)\n\t3) y-coordinate (real)\n\t4) velocity (real)\nMoves the object towards the given coordinates at the speed specified." },
		{ "sig": "ObjMove_SetDestAtFrame(obj, x, y, frames)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) x-coordinate (real)\n\t3) y-coordinate (real)\n\t4) frames (real)\nMoves the object towards the given coordinates in the number of frames specified." },
		{ "sig": "ObjMove_SetDestAtWeight(obj, x, y, weight, max_s)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) x-coordinate (real)\n\t3) y-coordinate (real)\n\t4) weight (real)\n\t5) max speed (real)\nMoves the object towards the given coordinates. It will slow down near the end of the movement based on the weight specified." },
		{ "sig": "ObjMove_AddPatternA1(obj, f, spd, ang)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) frame (real)\n\t3) speed (real)\n\t4) angle (real)\nAfter the specified number of frames, changes the speed and angle of the object. NO_CHANGE can be used to preserve the original speed or angle." },
		{ "sig": "ObjMove_AddPatternA2(obj, f, spd, ang, acc, ang_vel, max_s)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) frame (real)\n\t3) speed (real)\n\t4) angle (real)\n\t5) acceleration (real)\n\t6) angular velocity (real)\n\t7) max speed (real)\nAfter the specified number of frames, changes the movement properties of the object. NO_CHANGE can be used to preserve the original properties." },
		{ "sig": "ObjMove_AddPatternA3(obj, f, spd, ang, acc, ang_vel, max_s, g)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) frame (real)\n\t3) speed (real)\n\t4) angle (real)\n\t5) acceleration (real)\n\t6) angular velocity (real)\n\t7) max speed (real)\n\t8) bullet graphic (real)\nAfter the specified number of frames, changes the movement properties of the object. NO_CHANGE can be used to preserve the original properties." },
		{ "sig": "ObjMove_AddPatternA4(obj, f, spd, ang, acc, ang_vel, max_s, target, g)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) frame (real)\n\t3) speed (real)\n\t4) angle (real)\n\t5) acceleration (real)\n\t6) angular velocity (real)\n\t7) max speed (real)\n\t8) target ID (real)\n\t9) bullet graphic (real)\nAfter the specified number of frames, changes the movement properties of the object. NO_CHANGE can be used to preserve the original properties.\nThe angle parameter is relative to the angle from the object to the target.\nFor instance, if the player object id is used as the target, an angle of 0 will cause the object to aim for the player." },
		{ "sig": "ObjMove_AddPatternB1(obj, f, x_spd, y_spd)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) frame (real)\n\t3) x speed (real)\n\t4) y speed (real)\nAfter the specified number of frames, changes the x and y movement speeds of the object. NO_CHANGE can be used to preserve the original speeds." },
		{ "sig": "ObjMove_AddPatternB2(obj, f, x_spd, y_spd, x_acc, y_acc, x_max, y_max)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) frame (real)\n\t3) x speed (real)\n\t4) y speed (real)\n\t5) x acceleration (real)\n\t6) y acceleration (real)\n\t7) x max speed (real)\n\t8) y max speed (real)\nAfter the specified number of frames, changes the movement properties of the object. NO_CHANGE can be used to preserve the original properties." },
		{ "sig": "ObjMove_AddPatternB3(obj, f, x_spd, y_spd, x_acc, y_acc, x_max, y_max, g)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) frame (real)\n\t3) x speed (real)\n\t4) y speed (real)\n\t5) x acceleration (real)\n\t6) y acceleration (real)\n\t7) x max speed (real)\n\t8) y max speed (real)\n\t9) bullet graphic (real)\nAfter the specified number of frames, changes the movement properties of the object. NO_CHANGE can be used to preserve the original properties." },
		{ "sig": "ObjMove_GetX(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the x-coordinate of the object." },
		{ "sig": "ObjMove_GetY(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the y-coordinate of the object." },
		{ "sig": "ObjMove_GetSpeed(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the movement speed of the object." },
		{ "sig": "ObjMove_GetAngle(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the movement angle of the object." },

		// Enemy Object functions

		{ "sig": "ObjEnemy_Create(obj_type)\tobj", "doc": "Parameters:\n\t1) object type (constant)\nCreates an Enemy object and returns its ID. Object types are:\n\tOBJ_ENEMY\n\tOBJ_ENEMY_BOSS\nIn order to draw the enemy object and have it listed as an existing enemy, you have to register it using ObjEnemy_Regist.\nIf you want to create a boss enemy object, you have to create a boss scene object first." },
		{ "sig": "ObjEnemy_Regist(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nMakes the specified enemy object active." },
		{ "sig": "ObjEnemy_GetInfo(obj, info_type)\tdepend", "doc": "Parameters:\n\t1) object ID (real)\n\t2) info type (constant)\n\tINFO_LIFE: Returns the life points of the enemy (real).\n\tINFO_DAMAGE_RATE_SHOT: Returns the damage rate percentage of normal player shots set by ObjEnemy_SetDamageRate (real: 1-100)\n\tINFO_DAMAGE_RATE_SPELL: Returns the damage rate percentage of player bombs set by ObjEnemy_SetDamageRate (real: 1-100)\n\tINFO_SHOT_HIT_COUNT: Returns the amount of times the enemy was hit by player bullets in the previous frame (real)" },
		{ "sig": "ObjEnemy_SetLife(obj, life)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) life (real)\nSets the amount of life points for the specified enemy object." },
		{ "sig": "ObjEnemy_AddLife(obj, life)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) life (real)\nAdds the specified amount of life points to the enemy's life." },
		{ "sig": "ObjEnemy_SetDamageRate(obj, shot_rate, bomb_rate)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) shot damage rate (real)\n\t3) spell damage rate (real)\nSets the damage rate of the player's attacks against the specified enemy.\nSetting to 0 will cause the enemy to take no damage, 100 is the default (100%) value. Values above 100 are possible." },
		{ "sig": "ObjEnemy_SetIntersectionCircleToShot(obj, x, y, r)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) collision detection x-coordinate (real)\n\t3) collision detection y-coordinate (real)\n\t4) collision detection radius (real)\nSets the position and size of the enemy hitbox (any attack from the player touching the circle will damage the enemy)." },
		{ "sig": "ObjEnemy_SetIntersectionCircleToPlayer(obj, x, y, r)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) collision detection x-coordinate (real)\n\t3) collision detection y-coordinate (real)\n\t4) collision detection radius (real)\nSets the enemy hitbox for player collision. Any collision with the circle will kill the character.\nCreates a Boss Scene object and returns its ID." },

		// Boss Scene Object functions

		{ "sig": "ObjEnemyBossScene_Create()\tobj", "doc": "Creates a Boss Scene object and returns its ID." },
		{ "sig": "ObjEnemyBossScene_Regist(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nStarts the specified boss scene." },
		{ "sig": "ObjEnemyBossScene_Add(obj, phase, path)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) life phase (real)\n\t3) script path (char)\nAdds the specified script to the boss scene at the specified phase." },
		{ "sig": "ObjEnemyBossScene_LoadInThread(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nCompiles all the enemy scripts in the boss scene and initializes global variables.\nAs the length of compile time cannot be guaranteed, initialize all global variables besides constants in @Initialize." },
		{ "sig": "ObjEnemyBossScene_GetInfo(obj, info_type)\tdepend", "doc": "Parameters:\n\t1) object ID (real)\n\t2) info type (constant)\n\tINFO_IS_SPELL: Returns true if a spell card is active.\n\tINFO_IS_LAST_SPELL： Returns true if the Last Spell is active.\n\tINFO_IS_DURABLE_SPELL： Returns true in the case of a survival spell.\n\tINFO_IS_LAST_STEP： Returns true when the last spell is active.\n\tINFO_TIMER： Returns the timer value in seconds.\n\tINFO_TIMERF： Returns the timer value in frames (returns -1 if unlimited).\n\tINFO_ORGTIMERF： Returns the original timer value in frames (returns -1 if unlimited).\n\tINFO_SPELL_SCORE： Returns the score of the spell card.\n\tINFO_REMAIN_STEP_COUNT： Returns the number of steps remaining in the active life phase(spell, non spell, etc).\n\tINFO_ACTIVE_STEP_LIFE_COUNT： Returns the life of the enemy for the active step.\n\tINFO_ACTIVE_STEP_TOTAL_MAX_LIFE： Returns the initial life of the enemy for the active life phase.\n\tINFO_ACTIVE_STEP_TOTAL_LIFE： Returns the total remaining life for the active life phase\n\tINFO_PLAYER_SHOOTDOWN_COUNT： Returns the amount of times the player died during the spell.\n\tINFO_PLAYER_SPELL_COUNT： Returns the amount of times the player bombed during the spell.\n\tINFO_ACTIVE_STEP_LIFE_RATE_LIST： Returns an array containing the proportion (0-1) of each step's amount of life in the active life phase." },
		{ "sig": "ObjEnemyBossScene_SetSpellTimer(obj, time)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) timer (real)\nSets the timer." },
		{ "sig": "ObjEnemyBossScene_StartSpell(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nStarts the boss spell card." },

		// Shot Object functions

		{ "sig": "ObjShot_Create(obj_type)\tobj", "doc": "Parameters:\n\t1) object type (constant)\nCreates a Shot object and returns its ID. Object types are:\n\tOBJ_SHOT: generic bullet\n\tOBJ_LOOSE_LASER: loose laser\n\tOBJ_STRAIGHT_LASER: straight laser\n\tOBJ_CURVE_LASER: curved laser\nIn order to draw and fire the shot object and have it listed as an existing bullet, you have to register it using ObjShot_Regist." },
		{ "sig": "ObjShot_Regist(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nActivates the shot object, which will now be fired." },
		{ "sig": "ObjShot_SetAutoDelete(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) auto-delete (bool)\nEnables or disables auto-deletion of the shot object when outside of the screen boundaries. Defaults to true." },
		{ "sig": "ObjShot_FadeDelete(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nFades out the shot object and deletes it." },
		{ "sig": "ObjShot_SetDeleteFrame(obj, frame)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) frames (real)\nDeletes the shot object after the specified number of frames." },
		{ "sig": "ObjShot_SetDelay(obj, frames)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) frames (real)\nDelays the shot object, firing it after the specified number of frames. \nBullets will glow to announce delay; lasers will be shown very thin." },
		{ "sig": "ObjShot_SetSpellResist(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) spell resist (bool)\nWhen set to true, the shot object will not be deleted by the player's bomb. Defaults to false." },
		{ "sig": "ObjShot_SetGraphic(obj, g)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) graphic ID (real)\nGives the shot object the specified graphic.\nThe list of default graphics can be found at:\nhttp://www.geocities.co.jp/SiliconValley-Oakland/9951/products/th_dnh_help_v3_data/description.html#DefaultShot" },
		{ "sig": "ObjShot_SetSourceBlendType(obj, blend_type)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) blend type (constant)\nGives the shot object's delay graphic the specified blend type. Options are:\n\tBLEND_ALPHA: Alpha blend\n\tBLEND_ADD_RGB: Additive blend\n\tBLEND_ADD_ARGB: Additive blend with alpha channel\n\tBLEND_MULTIPLY: Multiplicative blend\n\tBLEND_SUBTRACT: Subtractive blend\n\tBLEND_INV_DESTRGB: Inverting blend" },
		{ "sig": "ObjShot_SetDamage(obj, damage)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) damage (real)\nSets the damage of the specified shot object. For player shots only." },
		{ "sig": "ObjShot_SetPenetration(obj, num)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) bullet penetration (real)\nSets the penetration of the shot object.\nThe shot object can hit enemies as many times as the penetration value before being deleted.\nFor player shots only." },
		{ "sig": "ObjShot_SetEraseShot(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) erase (bool)\nEnables/disables the ability to erase enemy shots when the specified shot object comes into contact with it. \nEach time a shot is erased, the penetration of the shot object will go down by 1.\nFor player shots only." },
		{ "sig": "ObjShot_SetSpellFactor(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) enable (bool)\nSets whether or not to use the spell damage factor for the shot object. For player shots only." },
		{ "sig": "ObjShot_ToItem(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nTurns the bullet into an item." },
		{ "sig": "ObjShot_AddShotA1(obj, target, frame)\tvoid", "doc": "Parameters:\n\t1) source object ID (real)\n\t2) object ID of shot object to add (real)\n\t3) frame on which to activate added shot (real)\nAt the specified frame, spawns the added shot object at the source shot object's position." },
		{ "sig": "ObjShot_AddShotA2(obj, target, frame, dist, angle)\tvoid", "doc": "Parameters:\n\t1) source object ID (real)\n\t2) object ID of shot object to add (real)\n\t3) frame on which to activate added shot (real)\n\t4) distance to source shot object (real)\n\t5) angle to source shot object (real)\nAt the specified frame, spawns the added shot object at the specified distance and angle from the source shot object's position." },
		{ "sig": "ObjShot_SetIntersectionCircleA1(obj, r)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) hitbox radius (real)\nCreates a hitbox of specified radius for collision detection of the shot object.\nIn order to maintain the hitbox, it must be set every frame.\nThere can be multiple hitboxes set for one shot object." },
		{ "sig": "ObjShot_SetIntersectionCircleA2(obj, x, y, r)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) x-coordinate of the center of the hitbox in relation to the object (real)\n\t3) Y-coordinate of the center of the hitbox in relation to the object (real)\n\t4) hitbox radius (real)\nCreates a hitbox of specified radius for collision detection of the shot object.\nIn order to maintain the hitbox, it must be set every frame.\nThere can be multiple hitboxes set for one shot object." },
		{ "sig": "ObjShot_SetIntersectionLine(obj, x1, y1, x2, y2, width)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) start x-coordinate (real)\n\t3) start y-coordinate (real)\n\t4) end x-coordinate (real)\n\t5) end y-coordinate (real)\n\t6) hitbox line width (real)\nCreates a line segment hitbox between the specified coordinates for collision detection of the shot object.\nIn order to maintain the hitbox, it must be set every frame.\nThere can be multiple hitboxes set for one shot object." },
		{ "sig": "ObjShot_SetIntersectionEnable(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) collision detection (bool)\nSets whether collision detection of the shot object will be checked.\nIf set to false, the shot object will have no collision detection." },
		{ "sig": "ObjShot_SetItemChange(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) enable (bool)\nSets whether the shot object will turn into an item when deleted.\nIf set to false, the shot object will not turn into an item." },
		{ "sig": "ObjShot_IsSpellResist(obj)\tbool", "doc": "Parameters:\n\t1) object ID (real)\nReturns whether the shot object can be deleted by a player bomb.\nShot object bomb resistance can be set with ObjShot_SetSpellResist." },
		{ "sig": "ObjShot_GetImageID(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the graphic ID of the shot object." },
		{ "sig": "ObjLaser_SetLength(obj, length)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) laser length (real)\nSets the length of the laser object." },
		{ "sig": "ObjLaser_SetRenderWidth(obj, width)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) render width (real)\nSets the visible width of the laser object (not the same as the laser object's collision width). " },
		{ "sig": "ObjLaser_SetIntersectionWidth(obj, width)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) collision width (real)\nSets the collision width of the laser object.\nThis can be set to be larger than the laser object's render width, so take caution." },
		{ "sig": "ObjLaser_SetGrazeInvalidFrame(obj, frames)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) invalid graze frames (real)\nSpecify the number of frames after a graze where graze is not counted.\nIf you specify 0, the laser object can be grazed only once. \nThe default value is 20 frames (3 graze/second)." },
		{ "sig": "ObjLaser_SetInvalidLength(obj, start_len, end_len)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) ratio removed from the laser base (real)\n\t3) ratio removed from the laser tip (real)\nSets the portion of the laser object where there is no collision, in relation to the base and the tip of the laser.\nBy default, the values are 10 (10%)." },
		{ "sig": "ObjLaser_GetLength(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the length of the laser object." },
		{ "sig": "ObjStLaser_SetAngle(obj, angle)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) angle (real)\nSets the angle at which the straight laser object will point at (different from movement angle)." },
		{ "sig": "ObjStLaser_GetAngle(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the angle at which the straight laser object is pointing (different from movement angle)." },
		{ "sig": "ObjStLaser_SetSource(obj, show)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) draw laser source (bool)\nSets whether the light source at the base of the straight laser object is drawn." },
		{ "sig": "ObjCrLaser_SetTipDecrement(obj, transparency_rate)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) tip transparency reduction rate (0.0-1.0) (real) \nSets the transparency reduction rate at the tip of the curved laser object. \nDefault is 1.0 (tip of laser is invisible)." },

		// Item Object functions

		{ "sig": "ObjItem_SetItemID(obj, item_id)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) item ID (real)\nSets the ID of the item object, as defined in the item definition script." },
		{ "sig": "ObjItem_SetRenderScoreEnable(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) enable score display (bool)\nSets whether a score indicator will be displayed when the item object is collected.\nThis is the score given as argument to the CreateItem() functions." },
		{ "sig": "ObjItem_SetAutoCollectEnable(obj, enable)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) enable auto-collect (bool)\nSets whether the item will be pulled towards the player when the player moves past the point of auto-collection." },
		{ "sig": "ObjItem_SetDefinedMovePatternA1(obj, move_type)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) movement type (real)\nSets the movement type of the item object. Movement types are:\n\tITEM_MOVE_DOWN: pops upward, then drops down\n\tITEM_MOVE_TOPLAYER: automatically flies towards the player\nDefaults to ITEM_MOVE_DOWN." },
		{ "sig": "ObjItem_GetInfo(obj, info_type)\tdepend", "doc": "Parameters:\n\t1) object ID (real)\n\t2) info type (constant)\n\tINFO_ITEM_SCORE: Returns the score value of the item object (real)." },

		// Player Object functions

		{ "sig": "ObjPlayer_AddIntersectionCircleA1(obj, off_x, off_y, hit_r, graze_r)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) hitbox x-coordinate (relative to player object) (real)\n\t3) hitbox y-coordinate (relative to player object) (real)\n\t4) hitbox radius (real)\n\t5) graze radius (real)\nCreates a hitbox of specified radius for collision detection of the player object.\nThe graze area extends the specified radius around the hitbox (the true graze radius is the sum of the two).\nThe hitbox will remain valid for every frame once created." },
		{ "sig": "ObjPlayer_AddIntersectionCircleA2(obj, off_x, off_y, graze_r)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\n\t2) grazebox x-coordinate (relative to player object) (real)\n\t3) grazebox y-coordinate (relative to player object) (real)\n\t4) graze radius (real)\nCreates a grazebox of specified radius for the player object.\nThe grazebox will remain valid for every frame once created." },
		{ "sig": "ObjPlayer_ClearIntersection(obj)\tvoid", "doc": "Parameters:\n\t1) object ID (real)\nDeletes the hitbox of the player object." },

		// Collision Object functions

		{ "sig": "ObjCol_IsIntersected(obj)\tbool", "doc": "Parameters:\n\t1) object ID (real)\nReturns true if the specified object is currently intersecting with another object." },
		{ "sig": "ObjCol_GetListOfIntersectedEnemyID(obj)\tobj[]", "doc": "Parameters:\n\t1) object ID (real)\nReturns an array of all enemy object IDs that the specified object is currently intersecting with." },
		{ "sig": "ObjCol_GetIntersectedCount(obj)\treal", "doc": "Parameters:\n\t1) object ID (real)\nReturns the number of times the specified object intersected with other objects during the previous frame.\nFor example, this can be used to determine how many player shots have collided with an enemy." }

		// Note: Must not have trailing comma for ST2 compatibility
	]
}